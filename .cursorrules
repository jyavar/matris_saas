# STRATO Core OS‚Ñ¢ - Cursor Rules

## üèóÔ∏è ARQUITECTURA DEL PROYECTO

STRATO es un monorepo SaaS con arquitectura modular:

```
matriz_cursor/
‚îú‚îÄ‚îÄ apps/
‚îÇ   ‚îú‚îÄ‚îÄ backend/          # API Node.js/Express + Supabase
‚îÇ   ‚îú‚îÄ‚îÄ frontend/         # React + Vite + TypeScript
‚îÇ   ‚îî‚îÄ‚îÄ web/             # Next.js Landing + Control Tower
‚îú‚îÄ‚îÄ packages/             # Librer√≠as compartidas
‚îú‚îÄ‚îÄ supabase/            # Base de datos y migraciones
‚îî‚îÄ‚îÄ scripts/             # Herramientas de desarrollo
```

## üéØ PATRONES Y CONVENCIONES

### Backend (Node.js/Express)
- **Controllers**: Manejan requests/responses, validaci√≥n, logging
- **Services**: L√≥gica de negocio, integraci√≥n con APIs externas
- **Routes**: Definici√≥n de endpoints REST
- **Middleware**: Auth, rate limiting, error handling, logging
- **Types**: Tipos TypeScript para Supabase y Express

### Frontend (React/Vite)
- **Components**: Reutilizables en `/components/ui/`
- **Pages**: P√°ginas principales en `/app/`
- **Services**: APIs y servicios externos
- **Contexts**: Estado global (AuthContext)
- **Hooks**: L√≥gica reutilizable

### Web (Next.js)
- **App Router**: Estructura moderna de Next.js 15
- **API Routes**: Endpoints para auditor√≠a y control
- **Components**: Landing page y Control Tower

## üîß TECNOLOG√çAS PRINCIPALES

### Backend
- **Node.js + Express 5**: API REST
- **TypeScript**: Tipado est√°tico
- **Supabase**: Base de datos PostgreSQL + Auth
- **Stripe**: Pagos
- **OpenAI**: IA
- **PostHog**: Analytics
- **Resend**: Email
- **Pino**: Logging estructurado

### Frontend
- **React 18**: UI Framework
- **Vite**: Build tool
- **TypeScript**: Tipado est√°tico
- **Tailwind CSS**: Estilos
- **Vitest**: Testing
- **MSW**: Mock Service Worker

### Web
- **Next.js 15**: Framework React
- **App Router**: Enrutamiento moderno
- **TypeScript**: Tipado est√°tico

## üìù CONVENCIONES DE C√ìDIGO

### Naming
- **Files**: kebab-case (auth.controller.ts)
- **Functions**: camelCase (getUserProfile)
- **Classes**: PascalCase (AuthService)
- **Constants**: UPPER_SNAKE_CASE (API_BASE_URL)
- **Types**: PascalCase (UserProfile)

### Imports
- **Relative**: Para archivos del mismo m√≥dulo
- **Absolute**: Para paquetes externos
- **Workspace**: Para paquetes internos (@repo/db-types)

### Error Handling
- **Controllers**: Try/catch con next(error)
- **Services**: Throw ApiError con c√≥digos HTTP
- **Frontend**: Error boundaries y estados de error

### Logging
- **Structured**: Pino con contexto estructurado
- **Actions**: logAction() para eventos de negocio
- **Levels**: info, warn, error seg√∫n severidad

## üß™ TESTING

### Backend Tests
- **Unit**: Services y utilidades
- **Integration**: Controllers y routes
- **Mocks**: Supabase, Stripe, OpenAI, PostHog, Resend
- **Coverage**: Vitest con cobertura
- **Framework**: Vitest (`apps/backend/vitest.config.ts`)
- **Rutas de tests**: `apps/backend/src/tests/`
- **Ejemplo de mock:**
  ```ts
  vi.mock('@supabase/supabase-js', () => ({
    createClient: vi.fn(() => ({
      auth: { signInWithPassword: vi.fn() },
      from: vi.fn()
    }))
  }))
  ```

### Frontend Tests
- **Components**: React Testing Library
- **Hooks**: Custom hooks testing
- **API**: MSW para mocking
- **E2E**: Playwright (opcional)
- **Framework**: Vitest (`apps/frontend/vitest.config.ts`)
- **Rutas de tests**: `apps/frontend/src/tests/`, `apps/frontend/tests-e2e/`
- **Ejemplo de mock con MSW:**
  ```ts
  import { rest } from 'msw'
  export const handlers = [
    rest.get('/api/user', (req, res, ctx) => res(ctx.json({ id: 1 })))
  ]
  ```

### Web Tests
- **Playwright**: Para pruebas E2E (`apps/frontend/tests-e2e/`)

## üîê SEGURIDAD

### Authentication
- **Supabase Auth**: JWT tokens
- **Middleware**: authMiddleware para rutas protegidas
- **Rate Limiting**: express-rate-limit
- **CORS**: Configurado para producci√≥n
- **Validaci√≥n de tokens**: Siempre validar JWT en endpoints protegidos. Ejemplo:
  ```ts
  if (!req.user) return res.status(401).json({ error: 'No autorizado' })
  ```

### Environment Variables
- **Backend**: SUPABASE_URL, JWT_SECRET, etc.
- **Frontend**: VITE_SUPABASE_URL, etc.
- **Never**: Committear secrets al repo

## üìä MONITORING

### Logging
- **Structured**: Pino con contexto estructurado
- **Levels**: info, warn, error
- **Actions**: Eventos de negocio trackeados
- **logAction()**: Usar para registrar eventos clave de negocio. Ejemplo:
  ```ts
  logAction('user_signup', userId, { email })
  ```

## ü§ñ AGENTES STRATO

### Agentes disponibles
- **@refactor**: Refactorizaci√≥n autom√°tica de c√≥digo. Ubicaci√≥n: `/scripts/agents/refactor/autofix.ts`
- **@qa**: Auditor√≠a de calidad y tests. Ubicaci√≥n: `/scripts/agents/qa/`
- **@data**: Procesamiento y migraci√≥n de datos. Ubicaci√≥n: `/scripts/agents/data/`
- **@merge-strategist**: Estrategias de merge y resoluci√≥n de conflictos. Ubicaci√≥n: `/scripts/agents/merge-strategist/`
- **@context-watchdog**: Monitoreo de contexto y rutas. Ubicaci√≥n: `/scripts/agents/context-watchdog.ts`

### Rol y l√≥gica principal
- Cada agente implementa una funci√≥n principal `runAgent()` y sigue la convenci√≥n de orquestaci√≥n desde `RuntimeService.runAgent()`.
- Los agentes pueden ser invocados desde scripts o CI para tareas autom√°ticas de refactor, QA, migraci√≥n, etc.

## üåê CONEXIONES EXTERNAS
- **Supabase**: Base de datos y autenticaci√≥n principal.
- **Stripe**: Procesamiento de pagos y suscripciones.
- **OpenAI**: Funcionalidades de IA y generaci√≥n de texto.
- **Resend**: Env√≠o de emails transaccionales.
- **PostHog**: Analytics y tracking de eventos.

## üö® ANTI-PATRONES A EVITAR

- ‚ùå Committear secrets
- ‚ùå Any types en TypeScript
- ‚ùå Console.log en producci√≥n
- ‚ùå Mutar props en React
- ‚ùå Callbacks anidados
- ‚ùå Variables globales
- ‚ùå Hardcoded URLs
- ‚ùå Ignorar errores de linting
- ‚ùå Omitir validaci√≥n de tokens en endpoints protegidos
- ‚ùå No usar mocks en tests de integraci√≥n
- ‚ùå No cubrir c√≥digo cr√≠tico con tests

## üéØ OBJETIVOS DEL PROYECTO

STRATO es un framework SaaS enterprise-grade que prioriza:
- **Developer Experience**: DX excepcional
- **Code Quality**: C√≥digo limpio y mantenible
- **Security**: Seguridad por defecto
- **Performance**: Rendimiento optimizado
- **Scalability**: Arquitectura escalable
- **Monitoring**: Observabilidad completa

## üìö RECURSOS

- **Supabase Docs**: https://supabase.com/docs
- **Next.js Docs**: https://nextjs.org/docs
- **React Docs**: https://react.dev
- **Tailwind CSS**: https://tailwindcss.com/docs
- **Vitest**: https://vitest.dev

## ‚úÖ CHECKLISTS DE VALIDACI√ìN

### Pull Request Checklist
- [ ] El c√≥digo tiene tests unitarios y de integraci√≥n
- [ ] Se validan tokens en endpoints protegidos
- [ ] Se loguean acciones clave con logAction()
- [ ] No hay secrets ni datos sensibles en el c√≥digo
- [ ] El PR incluye descripci√≥n clara y justificaci√≥n de cambios
- [ ] El c√≥digo sigue las convenciones de naming y estructura
- [ ] Se actualizaron los mocks si cambi√≥ la integraci√≥n externa
- [ ] El build y los tests pasan en CI

### Release Checklist
- [ ] Todos los tests pasan con cobertura m√≠nima
- [ ] No hay dependencias inseguras o deprecated
- [ ] Se revisaron los logs de errores recientes
- [ ] Se actualizaron las migraciones y seeds si aplica
- [ ] Se revisaron los permisos y accesos de servicios externos

---

## üìà COBERTURA M√çNIMA DE TESTS
- **Backend**: 90% l√≠neas, 90% branches
- **Frontend**: 90% l√≠neas, 90% branches
- **Bloquear PRs** si la cobertura baja de ese umbral
- **Comando**: `pnpm test:coverage` y revisar reporte

---

## üö´ EJEMPLOS DE ANTI-PATRONES Y FIXES

### ‚ùå Incorrecto
```ts
// No validar token
app.get('/api/secure', handler)

// Usar any
const data: any = {}

// Console.log en producci√≥n
console.log('debug')

// Mutar props
props.value = 123

// Hardcoded URL
fetch('https://api.stripe.com/v1/charges')
```

### ‚úÖ Correcto
```ts
// Validar token
app.get('/api/secure', authMiddleware, handler)

// Tipado estricto
const data: UserProfile = {}

// Logging estructurado
logger.info({ userId }, 'User logged in')

// Props inmutables
<MyComponent value={value} />

// Usar variables de entorno
fetch(`${process.env.STRIPE_API_URL}/charges`)
```

---

## üîë POL√çTICA DE SECRETS Y VARIABLES

| Variable                | Ubicaci√≥n         | Prop√≥sito                        |
|-------------------------|-------------------|----------------------------------|
| SUPABASE_URL            | Backend, Frontend | URL de Supabase                  |
| SUPABASE_KEY            | Backend           | API Key de Supabase              |
| JWT_SECRET              | Backend           | Firmar y validar JWT             |
| STRIPE_SECRET_KEY       | Backend           | API Key de Stripe                |
| OPENAI_API_KEY          | Backend           | API Key de OpenAI                |
| RESEND_API_KEY          | Backend           | API Key de Resend                |
| POSTHOG_API_KEY         | Backend           | API Key de PostHog               |
| VITE_SUPABASE_URL       | Frontend          | URL de Supabase (public)         |

- **Nunca** committear archivos `.env` ni valores reales
- Usar `.env.example` como plantilla
- Secrets en CI: usar GitHub Actions Secrets o Railway/Vercel envs

---

## üå≥ POL√çTICA DE BRANCHING Y RELEASES
- Solo mergear a `main` v√≠a Pull Request
- CI debe estar en verde y cobertura OK
- Revisi√≥n obligatoria de 2 devs para PRs a main
- Branches:
  - `main`: Producci√≥n
  - `develop`: Integraci√≥n (opcional)
  - `feature/*`: Nuevas features
  - `fix/*`: Hotfixes
  - `chore/*`: Mantenimiento
- Releases: usar tags semver (`v1.2.3`)

---

## üì¶ INTEGRIDAD DE DEPENDENCIAS
- No instalar paquetes sin justificaci√≥n en el PR
- Usar solo versiones estables (`^x.y.z`)
- Revisar dependabot y alertas de seguridad
- Eliminar dependencias no usadas
- Revisar cambios en `pnpm-lock.yaml` en cada PR

---

## üõ°Ô∏è REVISI√ìN DE ACCESOS Y PERMISOS
- Revisar roles y permisos en Supabase peri√≥dicamente
- Rotar claves de API cada 90 d√≠as
- Revisar accesos a Stripe, OpenAI, Resend y PostHog
- Limitar permisos de servicio a lo m√≠nimo necesario
- Documentar cambios de permisos en el PR

---

## üïµÔ∏è AUDITOR√çA Y OBSERVABILIDAD
- Auditar logs cr√≠ticos semanalmente
- Revisar errores y alertas en PostHog y logs de Pino
- Consultar m√©tricas de performance y uso
- Ejemplo de consulta de logs:
  ```sh
  pnpm logs | grep error
  ```
- Documentar incidentes y acciones correctivas

---

## ü§ñ AUTOMATIZACI√ìN Y SCRIPTS CLAVE
- `pnpm lint` ‚Äî Linting de todo el monorepo
- `pnpm test` ‚Äî Ejecutar todos los tests
- `pnpm build` ‚Äî Build de producci√≥n
- `pnpm format` ‚Äî Formato autom√°tico
- `pnpm check-react-imports` ‚Äî Verifica imports de React
- `pnpm tsx scripts/agents/refactor/autofix.ts` ‚Äî Refactor autom√°tico
- `pnpm tsx scripts/agents/qa/` ‚Äî Auditor√≠a de calidad
- `pnpm tsx scripts/agents/context-watchdog.ts` ‚Äî Monitoreo de contexto

---

## üöÄ ONBOARDING EXPRESS PARA NUEVOS DEVS
1. Clona el repo y corre `pnpm install`
2. Copia `.env.example` a `.env` y configura tus variables
3. Corre `pnpm dev` para levantar backend y frontend
4. Corre `pnpm test` para validar que todo pase
5. Lee `.cursorrules` y sigue los patrones
6. Haz tu feature en una branch `feature/tu-feature`
7. Abre un PR con checklist y justificaci√≥n
8. Pide revisi√≥n a 2 devs y espera CI verde
9. ¬°Bienvenido a STRATO! üöÄ

---

## üõ°Ô∏è BLINDAJE DE TRAZABILIDAD - PREVENCI√ìN DE P√âRDIDA DE ARCHIVOS

### üéØ OBJETIVO
Garantizar que NUNCA se pierdan archivos, m√≥dulos, rutas, tests o paths en el monorepo STRATO. Toda la trazabilidad debe estar documentada y validada autom√°ticamente.

### üìã HEADER JSON OBLIGATORIO PARA M√ìDULOS

Cada m√≥dulo debe tener un header JSON con metadata completa:

```json
{
  "module": "AUTH",
  "description": "Gesti√≥n de autenticaci√≥n y autorizaci√≥n",
  "paths": [
    "apps/backend/src/controllers/auth.controller.ts",
    "apps/backend/src/services/auth.service.ts",
    "apps/backend/src/routes/auth.routes.ts"
  ],
  "tests": [
    "apps/backend/src/tests/auth.test.ts",
    "apps/frontend/src/components/auth/ProtectedRoute.test.tsx"
  ],
  "routes": [
    "/api/auth/signup",
    "/api/auth/login"
  ],
  "docs": [
    "~M_AUTH.md"
  ],
  "last_synced": "2025-01-27",
  "responsible": "Jos√© + IA STRATO",
  "coverage": 100,
  "status": "active",
  "criticality": "high"
}
```

### üìÅ SECCI√ìN "ARCHIVOS CLAVE" OBLIGATORIA

Cada m√≥dulo debe tener una secci√≥n "Archivos clave" con:
- **Source files**: Todos los archivos .ts, .tsx, .js, .jsx
- **Test files**: Todos los archivos .test.ts, .test.tsx, .spec.ts
- **Config files**: Todos los archivos .json, .config.ts, .config.js
- **Doc files**: Todos los archivos .md relacionados
- **Scripts**: Scripts y utilidades del m√≥dulo

### üîç VALIDACI√ìN AUTOM√ÅTICA EN PRE-COMMIT/PRE-PUSH

**Script de validaci√≥n obligatorio** que detecte:
- ‚úÖ Archivos sin declarar en headers (hu√©rfanos)
- ‚úÖ Rutas sin documentar en m√≥dulos
- ‚úÖ Tests sin asociar a m√≥dulos
- ‚úÖ Paths sin cobertura de trazabilidad
- ‚ùå **BLOQUEAR COMMIT/PUSH** si hay inconsistencias

### üîÑ SINCRONIZACI√ìN BIDIRECCIONAL

**Reglas autom√°ticas**:
- **Crear archivo** ‚Üí Actualizar header y secci√≥n "Archivos clave" del m√≥dulo correspondiente
- **Modificar archivo** ‚Üí Verificar que est√© en header y secci√≥n "Archivos clave"
- **Eliminar archivo** ‚Üí Eliminar de header y secci√≥n "Archivos clave"
- **Mover archivo** ‚Üí Actualizar paths en todos los m√≥dulos afectados

### üìä METADATA EXTENDIDA POR ARCHIVO

Cada entrada de archivo debe tener:

```json
{
  "path": "apps/backend/src/controllers/auth.controller.ts",
  "type": "source",
  "module": "AUTH",
  "last_synced": "2025-01-27",
  "responsible": "Jos√©",
  "criticality": "high",
  "dependencies": ["auth.service.ts", "auth.middleware.ts"],
  "tests": ["auth.test.ts"],
  "routes": ["/api/auth/*"],
  "coverage": 95
}
```

### üìà REPORTES AUTOM√ÅTICOS

**Generar en cada auditor√≠a**:
- üìä Archivos cubiertos vs. hu√©rfanos
- üîç M√≥dulos desincronizados
- üß™ Tests no asociados
- üõ£Ô∏è Rutas no documentadas
- üìà Progreso de cobertura de visibilidad

### üö® INTEGRACI√ìN CON CI/CD

**El pipeline DEBE FALLAR si**:
- ‚ùå Hay archivos no cubiertos por headers
- ‚ùå Hay rutas sin documentar
- ‚ùå Hay tests sin asociar
- ‚ùå Hay paths hu√©rfanos
- ‚ùå Hay m√≥dulos sin header JSON v√°lido

### üé® PLANTILLA PARA NUEVOS M√ìDULOS

**Comando autom√°tico** para generar:
- Header JSON completo
- Secci√≥n "Archivos clave" inicial
- Tests asociados
- Documentaci√≥n base
- Validaciones de integridad

### üîß COMANDOS DE VALIDACI√ìN

```bash
# Validar trazabilidad completa
pnpm validate-traceability

# Sincronizar m√≥dulos
pnpm sync-modules

# Generar reporte de visibilidad
pnpm visibility-report

# Crear nuevo m√≥dulo con plantilla
pnpm create-module --name MODULE_NAME
```

### üìã CHECKLIST DE BLINDAJE

**Antes de cada commit**:
- [ ] Todos los archivos est√°n declarados en headers de m√≥dulos
- [ ] Todas las rutas est√°n documentadas
- [ ] Todos los tests est√°n asociados
- [ ] No hay archivos hu√©rfanos
- [ ] Headers JSON son v√°lidos
- [ ] Secciones "Archivos clave" est√°n actualizadas
- [ ] Metadata extendida est√° completa

**En cada PR**:
- [ ] Validaci√≥n de trazabilidad pasa
- [ ] Reporte de visibilidad est√° actualizado
- [ ] No hay archivos sin declarar
- [ ] M√≥dulos est√°n sincronizados

### üö´ ANTI-PATRONES DE TRAZABILIDAD

- ‚ùå **NUNCA** crear archivos sin declararlos en headers
- ‚ùå **NUNCA** mover archivos sin actualizar paths
- ‚ùå **NUNCA** eliminar archivos sin limpiar referencias
- ‚ùå **NUNCA** hacer commit con archivos hu√©rfanos
- ‚ùå **NUNCA** omitir validaci√≥n de trazabilidad
- ‚ùå **NUNCA** tener m√≥dulos sin header JSON
- ‚ùå **NUNCA** tener rutas sin documentar
- ‚ùå **NUNCA** tener tests sin asociar

### ‚úÖ PATRONES DE TRAZABILIDAD

- ‚úÖ **SIEMPRE** declarar archivos en headers de m√≥dulos
- ‚úÖ **SIEMPRE** actualizar paths al mover archivos
- ‚úÖ **SIEMPRE** limpiar referencias al eliminar archivos
- ‚úÖ **SIEMPRE** validar trazabilidad antes de commit
- ‚úÖ **SIEMPRE** mantener headers JSON actualizados
- ‚úÖ **SIEMPRE** documentar rutas en m√≥dulos
- ‚úÖ **SIEMPRE** asociar tests a m√≥dulos
- ‚úÖ **SIEMPRE** generar reportes de visibilidad

### üéØ M√âTRICAS DE √âXITO

- **Cobertura de trazabilidad**: 100%
- **Archivos hu√©rfanos**: 0
- **Rutas sin documentar**: 0
- **Tests sin asociar**: 0
- **M√≥dulos sin header**: 0
- **Validaciones fallidas**: 0

---

## üöÄ ONBOARDING EXPRESS PARA NUEVOS DEVS
1. Clona el repo y corre `pnpm install`
2. Copia `.env.example` a `.env` y configura tus variables
3. Corre `pnpm dev` para levantar backend y frontend
4. Corre `pnpm test` para validar que todo pase
5. Lee `.cursorrules` y sigue los patrones
6. Haz tu feature en una branch `feature/tu-feature`
7. Abre un PR con checklist y justificaci√≥n
8. Pide revisi√≥n a 2 devs y espera CI verde
9. ¬°Bienvenido a STRATO! üöÄ 