{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "wrapper-3d",
  "type": "registry:ui",
  "title": "3d Wrapper",
  "description": "This component transforms any content into an immersive, interactive 3D experience. It tracks cursor movements to animate a smooth rotation, creating a captivating depth effect.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/components/wrapper-3d.tsx",
      "content": "\"use client\";\r\n\r\nimport { useRef, ReactNode } from \"react\";\r\nimport React from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  motion,\r\n  useMotionTemplate,\r\n  useMotionValue,\r\n  useSpring,\r\n} from \"framer-motion\";\r\n\r\ninterface Wrapper3DProps {\r\n  children: ReactNode;\r\n  damping?: number;\r\n  swiftness?: number;\r\n  mass?: number;\r\n  maxRotation?: number;\r\n  translateZ?: number;\r\n  perspective?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport function Wrapper3D({\r\n  children,\r\n  damping = 20,\r\n  swiftness = 80,\r\n  mass = 1.5,\r\n  maxRotation = 100,\r\n  translateZ = 75,\r\n  perspective = true,\r\n  className,\r\n}: Wrapper3DProps) {\r\n  const halfMaxRotation = maxRotation / 2;\r\n\r\n  const refMotionDiv = useRef<HTMLDivElement | null>(null);\r\n\r\n  const x = useMotionValue(0);\r\n  const y = useMotionValue(0);\r\n\r\n  const xSpring = useSpring(x, {\r\n    damping: damping,\r\n    stiffness: swiftness,\r\n    mass: mass,\r\n  });\r\n\r\n  const ySpring = useSpring(y, {\r\n    damping: damping,\r\n    stiffness: swiftness,\r\n    mass: mass,\r\n  });\r\n\r\n  const transform = useMotionTemplate`rotateX(${xSpring}deg) rotateY(${ySpring}deg)`;\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (!refMotionDiv.current) return;\r\n\r\n    const rect = refMotionDiv.current.getBoundingClientRect();\r\n    const mouseX = e.clientX - rect.left;\r\n    const mouseY = e.clientY - rect.top;\r\n\r\n    const rX = ((mouseY / rect.height) * maxRotation - halfMaxRotation) * -1;\r\n    const rY = (mouseX / rect.width) * maxRotation - halfMaxRotation;\r\n\r\n    x.set(rX);\r\n    y.set(rY);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    x.set(0);\r\n    y.set(0);\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      ref={refMotionDiv}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      initial={{ opacity: 0, scale: 0.8 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      transition={{ duration: 1, ease: \"easeOut\" }}\r\n      style={{\r\n        transformStyle: \"preserve-3d\",\r\n        transform,\r\n        ...(perspective && { perspective: \"1000px\" }),\r\n      }}\r\n      className={cn(className)}\r\n    >\r\n      <div\r\n        style={{\r\n          transform: `translateZ(${translateZ}px)`,\r\n          transformStyle: \"preserve-3d\",\r\n        }}\r\n      >\r\n        {children}\r\n      </div>\r\n    </motion.div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}