{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stagger-blur-effect",
  "type": "registry:ui",
  "title": "Stagger Blur Effect",
  "description": "Inspired by Vercel's homepage, this text component creates a 3D rotation effect with blur on hover, revealing text with a staggered animation.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/components/text-animations/stagger-blur-effect.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect, ReactNode, CSSProperties } from \"react\";\nimport { stagger, useAnimate } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StaggerTextEffectProps {\n  className?: string;\n  children: ReactNode;\n  duration?: number;\n  staggerDelay?: number;\n  height?: number;\n}\n\nexport function StaggerBlurEffect({\n  className,\n  children,\n  duration = 0.3,\n  staggerDelay = 0.05,\n  height = 56,\n}: StaggerTextEffectProps) {\n  const [scope, animate] = useAnimate();\n  const [isRotatedUp, setIsRotatedUp] = useState<boolean>(false);\n\n  const onMouseEnter = () => {\n    setIsRotatedUp((prev) => !prev);\n  };\n\n  useEffect(() => {\n    if (isRotatedUp) {\n      animate([\n        [\n          \".letter\",\n          { rotateX: 80 },\n          { duration, delay: stagger(staggerDelay) },\n        ],\n        [\n          \".face-front\",\n          { filter: \"blur(6px)\", opacity: 0 },\n          { duration, delay: stagger(staggerDelay), at: \"<\" },\n        ],\n        [\n          \".face-back\",\n          { filter: \"blur(0px)\", opacity: 1 },\n          { duration, delay: stagger(staggerDelay), at: \"<\" },\n        ],\n      ]);\n    } else {\n      animate([\n        [\".letter\", { rotateX: 0 }, { duration, delay: stagger(staggerDelay) }],\n        [\n          \".face-front\",\n          { filter: \"blur(0px)\", opacity: 1 },\n          { duration, delay: stagger(staggerDelay), at: \"<\" },\n        ],\n        [\n          \".face-back\",\n          { filter: \"blur(6px)\", opacity: 0 },\n          { duration, delay: stagger(staggerDelay), at: \"<\" },\n        ],\n      ]);\n    }\n  }, [isRotatedUp, animate, duration, staggerDelay]);\n\n  const lettersArray = children?.toString().split(\"\") || [];\n\n  return (\n    <div\n      ref={scope}\n      style={\n        {\n          \"--height\": `${height}px`,\n          perspective: \"1000px\",\n        } as CSSProperties\n      }\n      onMouseEnter={onMouseEnter}\n      className={cn(\n        \"inline-block cursor-pointer font-semibold tracking-tighter\",\n        className\n      )}\n    >\n      <span className=\"sr-only\">{children}</span>\n      <span\n        aria-hidden\n        className=\"flex items-center justify-center relative text-5xl h-[--height]\"\n      >\n        {lettersArray.map((letter, index) => (\n          <span\n            style={{\n              transformStyle: \"preserve-3d\",\n              transition: `transform cubic-bezier(0.3, 0.65, 0.4, 1)`,\n              backfaceVisibility: \"hidden\",\n            }}\n            data-letter={letter}\n            key={`${letter}-${index}`}\n            className=\"letter inline-block h-[--height] leading-[--height] relative\"\n          >\n            <span\n              aria-hidden=\"true\"\n              className=\"face face-front absolute inset-0 flex items-center justify-center\"\n            >\n              {letter === \" \" ? \"\\u00A0\" : letter}\n            </span>\n            <span\n              aria-hidden=\"true\"\n              className=\"face face-back absolute inset-0 flex items-center justify-center\"\n            >\n              {letter === \" \" ? \"\\u00A0\" : letter}\n            </span>\n            <span className=\"opacity-0\">\n              {letter === \" \" ? \"\\u00A0\" : letter}\n            </span>\n          </span>\n        ))}\n        <style jsx>{`\n          .face {\n            backface-visibility: hidden;\n            transform-style: preserve-3d;\n          }\n          .face-front {\n            transform: rotateX(0deg) translateZ(calc(var(--height) / 2));\n          }\n          .face-back {\n            transform: rotateX(-80deg) translateZ(calc(var(--height) / 2));\n            backface-visibility: hidden;\n            filter: blur(8px);\n            opacity: 0;\n          }\n        `}</style>\n      </span>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}