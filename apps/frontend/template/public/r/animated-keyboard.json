{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-keyboard",
  "type": "registry:ui",
  "title": "Animated Keyboard",
  "description": "A fun and interactive animated keyboard with keycaps that can be customized with different colors and variants.",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/components/animated-keyboard.tsx",
      "content": "\"use client\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { memo, useEffect, useState } from \"react\";\r\nimport { ReactNode } from \"react\";\r\n\r\ntype KeycapProps = {\r\n  height?: string;\r\n  keylightColor?: \"default\" | \"red\" | \"blue\" | \"green\" | \"purple\" | \"rgb\";\r\n  char?: string;\r\n  secondaryChar?: string;\r\n  className?: string;\r\n} & VariantProps<typeof keycapVariants>;\r\n\r\nconst keycapVariants = cva(\"bg-gradient-to-b border rounded-lg relative\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"aspect-square\",\r\n      double: \"aspect-square\",\r\n      tab: \"aspect-[1.77] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\r\n      caps: \"aspect-[1.85] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\r\n      shift: \"aspect-[2.32] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\r\n      command: \"aspect-[1.34] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\r\n      space: \"aspect-[8.3] [&_span]:text-[calc(var(--keycap-height)/3.5)]\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n  },\r\n});\r\n\r\nconst keylightColors = {\r\n  default: {\r\n    light: \"before:shadow-[0px_1px_5px_0px_#00000020]\",\r\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#ffffff20]\",\r\n  },\r\n  red: {\r\n    light: \"before:shadow-[0px_1px_5px_0px_#ff0000]\",\r\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#ff0000]\",\r\n  },\r\n  blue: {\r\n    light: \"before:shadow-[0px_1px_5px_0px_#0000ff]\",\r\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#0000ff]\",\r\n  },\r\n  green: {\r\n    light: \"before:shadow-[0px_1px_5px_0px_#00ff00]\",\r\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#00ff00]\",\r\n  },\r\n  purple: {\r\n    light: \"before:shadow-[0px_1px_5px_0px_#800080]\",\r\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_#800080]\",\r\n  },\r\n  rgb: {\r\n    light:\r\n      \"before:shadow-[0px_1px_5px_0px_var(--rgb-color)] before:transition-[box-shadow] before:duration-300 before:ease-in-out\",\r\n    dark: \"dark:before:shadow-[0px_2px_5px_0px_var(--rgb-color)] before:transition-[box-shadow] before:duration-300 before:ease-in-out\",\r\n  },\r\n};\r\n\r\nconst rgbColors = [\r\n  \"#ff0000\",\r\n  \"#ff00ff\",\r\n  \"#0000ff\",\r\n  \"#00ffff\",\r\n  \"#00ff00\",\r\n  \"#ffff00\",\r\n];\r\n\r\nconst RGBAnimation = memo(function RGBAnimation({\r\n  currentColorIndex,\r\n  keylightColor,\r\n}: {\r\n  currentColorIndex: number;\r\n  keylightColor: string;\r\n}) {\r\n  if (keylightColor !== \"rgb\") return null;\r\n\r\n  return (\r\n    <style jsx global>{`\r\n      :root {\r\n        --rgb-color: ${rgbColors[currentColorIndex]};\r\n      }\r\n    `}</style>\r\n  );\r\n});\r\n\r\nexport const Keycap = memo(function Keycap({\r\n  height = \"56px\",\r\n  keylightColor = \"default\",\r\n  char,\r\n  secondaryChar,\r\n  variant,\r\n  className,\r\n}: KeycapProps) {\r\n  const [currentColorIndex, setCurrentColorIndex] = useState(0);\r\n\r\n  if (secondaryChar && variant !== \"double\") {\r\n    console.warn(\"secondaryChar should only be used with variant 'double'\");\r\n    secondaryChar = undefined;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (keylightColor !== \"rgb\") return;\r\n\r\n    const interval = setInterval(() => {\r\n      setCurrentColorIndex((prev) => (prev + 1) % rgbColors.length);\r\n    }, 3000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [keylightColor]);\r\n\r\n  return (\r\n    <>\r\n      <RGBAnimation\r\n        currentColorIndex={currentColorIndex}\r\n        keylightColor={keylightColor}\r\n      />\r\n      <div\r\n        style={\r\n          {\r\n            \"--keycap-height\": height,\r\n          } as React.CSSProperties\r\n        }\r\n        className={cn(\r\n          keycapVariants({ variant }),\r\n          \"from-neutral-50 to-neutral-100 border-neutral-200 cursor-default\",\r\n          \"dark:from-neutral-900 dark:to-neutral-950 dark:border-neutral-800\",\r\n          \"shadow-[0px_5px_0px_0px_#e5e5e5] dark:shadow-[0px_5px_0px_0px_#262626]\",\r\n          \"transition-all duration-100 ease-in-out\",\r\n          \"hover:shadow-[0px_2px_0px_0px_#e5e5e5] dark:hover:shadow-[0px_2px_0px_0px_#262626]\",\r\n          \"before:inset-0 before:absolute before:rounded-[inherit]\",\r\n          \"after:inset-[1px] after:absolute after:rounded-[inherit] after:shadow-[rgba(255,_255,_255,_0.05)_0px_1px_0px_inset]\",\r\n          keylightColors[keylightColor].light,\r\n          keylightColors[keylightColor].dark,\r\n          \"hover:-translate-y-[-3px] hover:opacity-90\",\r\n          \"h-[var(--keycap-height)]\",\r\n          \"will-change-transform\",\r\n          className\r\n        )}\r\n      >\r\n        <div className=\"relative z-10 flex flex-col items-center justify-center h-full text-neutral-800 dark:text-neutral-100\">\r\n          {variant === \"double\" ? (\r\n            <div className=\"flex flex-col items-center justify-between h-full w-full p-[15%]\">\r\n              <span className=\"text-[calc(var(--keycap-height)/4)] leading-none\">\r\n                {secondaryChar}\r\n              </span>\r\n              <span className=\"text-[calc(var(--keycap-height)/3.5)] leading-none\">\r\n                {char}\r\n              </span>\r\n            </div>\r\n          ) : (\r\n            <span className=\"text-[calc(var(--keycap-height)/2.75)] leading-none\">\r\n              {char}\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\ntype KeyboardProps = {\r\n  children: ReactNode;\r\n  className?: string;\r\n  gap?: \"sm\" | \"md\" | \"lg\";\r\n};\r\n\r\nexport function Keyboard({ children, className, gap = \"md\" }: KeyboardProps) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"grid grid-cols-1\",\r\n        {\r\n          \"gap-1\": gap === \"sm\",\r\n          \"gap-2\": gap === \"md\",\r\n          \"gap-3\": gap === \"lg\",\r\n        },\r\n        \"p-4 bg-neutral-100 dark:bg-neutral-900 rounded-xl shadow-sm\",\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\ntype KeyRowProps = {\r\n  children: ReactNode;\r\n  className?: string;\r\n  gap?: \"sm\" | \"md\" | \"lg\";\r\n};\r\n\r\nexport function KeyRow({ children, className, gap = \"md\" }: KeyRowProps) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex items-center justify-center\",\r\n        {\r\n          \"gap-1\": gap === \"sm\",\r\n          \"gap-2\": gap === \"md\",\r\n          \"gap-3\": gap === \"lg\",\r\n        },\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}