{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mouse-wave",
  "type": "registry:ui",
  "title": "Mouse Wave Shader",
  "description": "An interactive and customizable component that creates a dynamic wave effect responding to mouse movements, perfect for immersive backgrounds.",
  "dependencies": [
    "@react-three/fiber",
    "@react-three/drei",
    "gsap",
    "three"
  ],
  "files": [
    {
      "path": "registry/components/shaders/mouse-wave-scene.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport MouseWave from \"@/registry/components/ui/mouse-wave\";\r\n\r\ninterface MouseWaveSceneProps {\r\n  imageSrc: string;\r\n  alt?: string;\r\n  marginFactor?: number;\r\n}\r\n\r\nexport default function MouseWaveScene({\r\n  imageSrc,\r\n  alt,\r\n  marginFactor = 1.05,\r\n}: MouseWaveSceneProps) {\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\r\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [dimensions, setDimensions] = useState({\r\n    width: 0,\r\n    height: 0,\r\n  });\r\n  const [key, setKey] = useState(0);\r\n\r\n  const updateDimensions = useCallback(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    const parentWidth = containerRef.current.clientWidth;\r\n    setIsMobile(window.innerWidth < 640);\r\n    const img = new Image();\r\n    img.src = imageSrc;\r\n    img.onload = () => {\r\n      const aspect = img.width / img.height;\r\n      const newHeight = parentWidth / aspect;\r\n      setDimensions({\r\n        width: parentWidth,\r\n        height: parentWidth / aspect,\r\n      });\r\n\r\n      if (!isMobile) {\r\n        const newDistance =\r\n          (newHeight / 2 / Math.tan((45 * Math.PI) / 360)) * marginFactor;\r\n        if (cameraRef.current) {\r\n          cameraRef.current.position.set(0, 0, newDistance);\r\n          cameraRef.current.updateProjectionMatrix();\r\n        }\r\n      }\r\n    };\r\n  }, [imageSrc]);\r\n\r\n  useEffect(() => {\r\n    updateDimensions();\r\n    const observer = new ResizeObserver(() => {\r\n      requestAnimationFrame(updateDimensions);\r\n    });\r\n\r\n    window.addEventListener(\"resize\", updateDimensions);\r\n\r\n    if (containerRef.current) observer.observe(containerRef.current);\r\n    return () => {\r\n      observer.disconnect();\r\n      window.removeEventListener(\"resize\", updateDimensions);\r\n    };\r\n  }, [updateDimensions]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setKey(1);\r\n    }, 100);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      style={{ width: \"100%\", height: dimensions.height }}\r\n    >\r\n      {isMobile ? (\r\n        <img\r\n          src={imageSrc}\r\n          alt={alt || \"Shader preview\"}\r\n          style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\" }}\r\n        />\r\n      ) : (\r\n        <Canvas\r\n          key={key}\r\n          camera={{\r\n            fov: 45,\r\n            aspect: dimensions.width / dimensions.height,\r\n            near: 0.1,\r\n            far: 1000,\r\n            position: [\r\n              0,\r\n              0,\r\n              dimensions.height / 2 / Math.tan((45 * Math.PI) / 360),\r\n            ],\r\n          }}\r\n          onCreated={({ camera }) => {\r\n            cameraRef.current = camera as THREE.PerspectiveCamera;\r\n          }}\r\n          style={{ width: \"100%\", height: \"100%\" }}\r\n        >\r\n          <MouseWave\r\n            imageSrc={imageSrc}\r\n            canvasWidth={dimensions.width}\r\n            canvasHeight={dimensions.height}\r\n          />\r\n        </Canvas>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/components/shaders/mouse-wave-shader.tsx",
      "content": "// Classic 3D Perlin Noise created by Stefan Gustavson\r\n\r\nexport const vertex = `\r\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\r\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\r\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\r\n\r\nfloat cnoise(vec3 P){\r\n  vec3 Pi0 = floor(P); \r\n  vec3 Pi1 = Pi0 + vec3(1.0);\r\n  Pi0 = mod(Pi0, 289.0);\r\n  Pi1 = mod(Pi1, 289.0);\r\n  vec3 Pf0 = fract(P); \r\n  vec3 Pf1 = Pf0 - vec3(1.0);\r\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n  vec4 iz0 = Pi0.zzzz;\r\n  vec4 iz1 = Pi1.zzzz;\r\n\r\n  vec4 ixy = permute(permute(ix) + iy);\r\n  vec4 ixy0 = permute(ixy + iz0);\r\n  vec4 ixy1 = permute(ixy + iz1);\r\n\r\n  vec4 gx0 = ixy0 / 7.0;\r\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\r\n  gx0 = fract(gx0);\r\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n  vec4 sz0 = step(gz0, vec4(0.0));\r\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n  vec4 gx1 = ixy1 / 7.0;\r\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\r\n  gx1 = fract(gx1);\r\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n  vec4 sz1 = step(gz1, vec4(0.0));\r\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n  g000 *= norm0.x;\r\n  g010 *= norm0.y;\r\n  g100 *= norm0.z;\r\n  g110 *= norm0.w;\r\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n  g001 *= norm1.x;\r\n  g011 *= norm1.y;\r\n  g101 *= norm1.z;\r\n  g111 *= norm1.w;\r\n\r\n  float n000 = dot(g000, Pf0);\r\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\r\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\r\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\r\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\r\n  float n111 = dot(g111, Pf1);\r\n\r\n  vec3 fade_xyz = fade(Pf0);\r\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n  return 2.2 * n_xyz;\r\n}\r\n\r\n\r\n  uniform float uTime;\r\n  uniform vec2 uHover;\r\n  uniform float uHoverState;\r\n  \r\n  varying float vNoise;\r\n  varying vec2  vUv;\r\n  \r\n\r\n  void main() {\r\n    vec3 newposition = position;\r\n    float PI = 3.1415925;\r\n    float noise = cnoise(3.*vec3(position.x,position.y,position.z + uTime/30.));\r\n    float dist = distance(uv, uHover);\r\n    newposition.z += uHoverState*10.*sin(dist*10. + uTime);\r\n    vNoise = uHoverState*sin(dist*10. - uTime);\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( newposition, 1.0);\r\n  }\r\n`;\r\n\r\nexport const fragment = `\r\n  uniform sampler2D uTexture;\r\n  varying vec2  vUv;\r\n  varying float vNoise;\r\n  uniform float uTime;\r\n\r\n  void main() {\r\n  vec2 newUV = vUv;\r\n\r\n  vec4 color = texture2D(uTexture, vUv);\r\n    gl_FragColor = color;\r\n    gl_FragColor.rgb += 0.0035*vec3(vNoise);\r\n  }\r\n`;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/components/shaders/mouse-wave.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport { fragment, vertex } from \"@/registry/components/ui/mouse-wave-shader\";\r\nimport { ThreeEvent, useFrame, useThree } from \"@react-three/fiber\";\r\nimport { useTexture } from \"@react-three/drei\";\r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\n//import { useControls } from \"leva\";\r\n\r\ninterface MouseWaveProps {\r\n  imageSrc: string;\r\n  canvasWidth: number;\r\n  canvasHeight: number;\r\n}\r\n\r\nexport default function MouseWave({\r\n  imageSrc,\r\n  canvasWidth,\r\n  canvasHeight,\r\n}: MouseWaveProps) {\r\n  const plane = useRef<THREE.Mesh>(null);\r\n  const texture = useTexture(imageSrc);\r\n  const { raycaster, camera } = useThree();\r\n\r\n  const uniforms = useRef({\r\n    uTexture: { value: texture },\r\n    uTime: { value: 0 },\r\n    uHover: { value: new THREE.Vector2(0.5, 0.5) },\r\n    uHoverState: { value: 0 },\r\n  });\r\n\r\n  //If you ever want to experiment, you can install Leva and use the controls; otherwise, feel free to remove this.\r\n  /*\r\n  const controls = useControls(\"Shader Controls\", {\r\n    uTime: { value: 0, min: 0, max: 10, step: 0.1 },\r\n    uHoverState: { value: 0, min: 0, max: 10, step: 0.01 },\r\n  });\r\n\r\n  useFrame(() => {\r\n    uniforms.current.uTime.value = controls.uTime;\r\n    uniforms.current.uHoverState.value = controls.uHoverState;\r\n  });\r\n  */\r\n\r\n  useFrame((state) => {\r\n    if (plane.current) {\r\n      const material = plane.current.material as THREE.ShaderMaterial;\r\n      material.uniforms.uTime.value = state.clock.elapsedTime;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (camera instanceof THREE.PerspectiveCamera) {\r\n      camera.aspect = canvasWidth / canvasHeight;\r\n      camera.updateProjectionMatrix();\r\n    }\r\n  }, [canvasWidth, canvasHeight, camera]);\r\n\r\n  const handlePointerMove = (event: ThreeEvent<PointerEvent>) => {\r\n    if (!plane.current) return;\r\n\r\n    const pointer = new THREE.Vector2(\r\n      (event.clientX / window.innerWidth) * 2 - 1,\r\n      -(event.clientY / window.innerHeight) * 2 + 1,\r\n    );\r\n\r\n    raycaster.setFromCamera(pointer, camera);\r\n    const intersects = raycaster.intersectObject(plane.current!);\r\n\r\n    if (intersects.length > 0) {\r\n      const obj = intersects[0].object as THREE.Mesh;\r\n      const uv = intersects[0].uv;\r\n\r\n      if (uv) {\r\n        (obj.material as THREE.ShaderMaterial).uniforms.uHover.value.set(\r\n          uv.x,\r\n          uv.y,\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePointerEnter = () => {\r\n    gsap.to(uniforms.current.uHoverState, {\r\n      duration: 1,\r\n      value: 1,\r\n    });\r\n  };\r\n\r\n  const handlePointerLeave = () => {\r\n    gsap.to(uniforms.current.uHoverState, {\r\n      duration: 1,\r\n      value: 0,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <mesh\r\n      ref={plane}\r\n      onPointerMove={handlePointerMove}\r\n      onPointerEnter={handlePointerEnter}\r\n      onPointerLeave={handlePointerLeave}\r\n      position={[0, 0, 0]}\r\n    >\r\n      <planeGeometry args={[canvasWidth, canvasHeight, 45, 45]} />\r\n      <shaderMaterial\r\n        side={THREE.DoubleSide}\r\n        vertexShader={vertex}\r\n        fragmentShader={fragment}\r\n        uniforms={uniforms.current}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}