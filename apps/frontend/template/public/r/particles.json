{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "particles",
  "type": "registry:ui",
  "title": "Particles",
  "description": "A versatile and performant component for creating engaging, animated content displays with smooth infinite scrolling animations. Perfect for showcasing client logos, testimonials, feature highlights, and promotional content with customizable speed, direction, and responsive design.",
  "dependencies": [
    "@tsparticles/slim",
    "@tsparticles/react"
  ],
  "files": [
    {
      "path": "registry/components/particles.tsx",
      "content": "\"use client\";\r\n\r\nimport { useEffect, useId, useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Particles as TSParticles,\r\n  initParticlesEngine,\r\n} from \"@tsparticles/react\";\r\nimport { loadSlim } from \"@tsparticles/slim\";\r\n\r\ntype ParticleVariant = \"default\" | \"snow\" | \"stars\";\r\n\r\ninterface ParticleStyle {\r\n  count?: number;\r\n  size?: number;\r\n  speed?: number;\r\n  opacity?: number;\r\n  color?: string;\r\n}\r\n\r\ninterface ParticlesProps {\r\n  className?: string;\r\n  variant?: ParticleVariant;\r\n  style?: ParticleStyle;\r\n  interactive?: boolean;\r\n  customOptions?: Record<string, unknown>;\r\n}\r\n\r\nconst variantStyles: Record<\r\n  ParticleVariant,\r\n  ParticleStyle & { options?: Record<string, unknown> }\r\n> = {\r\n  default: {\r\n    count: 200,\r\n    size: 2,\r\n    speed: 1.5,\r\n    opacity: 0.8,\r\n    color: \"#FFFFFF\",\r\n  },\r\n  snow: {\r\n    count: 300,\r\n    size: 1.2,\r\n    speed: 1,\r\n    opacity: 0.6,\r\n    color: \"#FFFFFF\",\r\n    options: {\r\n      interactivity: {\r\n        detectOn: \"canvas\",\r\n        events: {\r\n          onHover: {\r\n            enable: false,\r\n          },\r\n        },\r\n      },\r\n      particles: {\r\n        move: {\r\n          enable: true,\r\n          speed: {\r\n            min: 2,\r\n            max: 3,\r\n          },\r\n          direction: \"bottom\",\r\n          random: true,\r\n          straight: false,\r\n          outModes: {\r\n            default: \"out\",\r\n          },\r\n        },\r\n        shape: {\r\n          type: \"circle\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  stars: {\r\n    count: 200,\r\n    size: 1.5,\r\n    speed: 0.1,\r\n    opacity: 0.8,\r\n    color: \"#FFFFFF\",\r\n    options: {\r\n      interactivity: {\r\n        detectOn: \"canvas\",\r\n        events: {\r\n          onHover: {\r\n            enable: false,\r\n          },\r\n        },\r\n      },\r\n      particles: {\r\n        move: {\r\n          enable: true,\r\n          speed: {\r\n            min: 0.1,\r\n            max: 0.3,\r\n          },\r\n          direction: \"none\",\r\n          random: true,\r\n          straight: false,\r\n          outModes: {\r\n            default: \"out\",\r\n          },\r\n        },\r\n        twinkle: {\r\n          particles: {\r\n            enable: true,\r\n            frequency: 0.1,\r\n            opacity: 1,\r\n          },\r\n        },\r\n        shape: {\r\n          type: \"star\",\r\n        },\r\n        shadow: {\r\n          enable: true,\r\n          color: \"#FFFFFF\",\r\n          blur: 5,\r\n          offset: {\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n        },\r\n        glow: {\r\n          enable: true,\r\n          color: \"#FFFFFF\",\r\n          distance: 10,\r\n          size: 2,\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport function Particles({\r\n  className,\r\n  variant = \"default\",\r\n  style = {},\r\n  interactive = true,\r\n  customOptions = {},\r\n}: ParticlesProps) {\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  useEffect(() => {\r\n    initParticlesEngine(async (engine) => {\r\n      await loadSlim(engine);\r\n    }).then(() => {\r\n      setIsInitialized(true);\r\n    });\r\n  }, []);\r\n\r\n  const id = useId();\r\n\r\n  const baseStyle = variantStyles[variant];\r\n  const finalStyle = { ...baseStyle, ...style };\r\n\r\n  const defaultOptions = {\r\n    detectRetina: true,\r\n    fpsLimit: 120,\r\n    interactivity: {\r\n      detectOn: \"canvas\",\r\n      events: {\r\n        onHover: {\r\n          enable:\r\n            variant === \"snow\" || variant === \"stars\" ? false : interactive,\r\n          mode: \"repulse\",\r\n        },\r\n      },\r\n      modes: {\r\n        repulse: {\r\n          distance: 150,\r\n          duration: 1.2,\r\n          factor: 6,\r\n          speed: 0.5,\r\n        },\r\n      },\r\n    },\r\n    particles: {\r\n      number: {\r\n        value: finalStyle.count,\r\n      },\r\n      color: {\r\n        value: finalStyle.color,\r\n      },\r\n      opacity: {\r\n        value: {\r\n          min: (finalStyle.opacity || 0.8) / 5,\r\n          max: finalStyle.opacity || 0.8,\r\n        },\r\n        animation: {\r\n          enable: true,\r\n          sync: false,\r\n          speed: 2,\r\n        },\r\n      },\r\n      size: {\r\n        value: {\r\n          min: (finalStyle.size || 2) / 5,\r\n          max: finalStyle.size || 2,\r\n        },\r\n      },\r\n      move: {\r\n        enable: true,\r\n        speed: {\r\n          min: (finalStyle.speed || 1.5) / 5,\r\n          max: finalStyle.speed || 1.5,\r\n        },\r\n        direction: \"none\",\r\n        random: true,\r\n        straight: false,\r\n        outModes: {\r\n          default: \"out\",\r\n        },\r\n        attract: {\r\n          enable: false,\r\n          rotateX: 600,\r\n          rotateY: 1200,\r\n        },\r\n      },\r\n    },\r\n    fullScreen: {\r\n      enable: false,\r\n      zIndex: 1,\r\n    },\r\n    background: {\r\n      color: {\r\n        value: \"transparent\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const deepMerge = (target: any, source: any) => {\r\n    const output = { ...target };\r\n    if (source) {\r\n      Object.keys(source).forEach((key) => {\r\n        if (source[key] instanceof Object && key in target) {\r\n          output[key] = deepMerge(target[key], source[key]);\r\n        } else {\r\n          output[key] = source[key];\r\n        }\r\n      });\r\n    }\r\n    return output;\r\n  };\r\n\r\n  const variantOptions = baseStyle.options || {};\r\n  const mergedOptions = deepMerge(defaultOptions, variantOptions);\r\n  const finalOptions = deepMerge(mergedOptions, customOptions);\r\n\r\n  return (\r\n    isInitialized && (\r\n      <TSParticles\r\n        id={id}\r\n        options={finalOptions}\r\n        className={cn(\"absolute inset-0\", className)}\r\n      />\r\n    )\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}