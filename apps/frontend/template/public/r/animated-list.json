{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-list",
  "type": "registry:ui",
  "title": "Animated List",
  "description": "A sophisticated animation component that creates dynamic column-based transitions with scaling effects. Perfect for showcasing notifications, messages, or any sequential content with smooth formation, scrolling, and reset animations.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/components/animated-list.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useMemo, useState, useEffect } from \"react\";\r\nimport { motion, AnimatePresence, useAnimationControls } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype AnimationPhase =\r\n  | \"idle\"\r\n  | \"forming_column\"\r\n  | \"scrolling_down\"\r\n  | \"resetting\";\r\n\r\ntype AnimatedListProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  stackGap?: number;\r\n  columnGap?: number;\r\n  scaleFactor?: number;\r\n  scrollDownDuration?: number;\r\n  formationDuration?: number;\r\n};\r\n\r\ntype AnimatedListItemProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  index: number;\r\n  listLength: number;\r\n  stackGap?: number;\r\n  columnGap?: number;\r\n  scaleFactor?: number;\r\n};\r\n\r\nfunction InternalAnimatedListItem({\r\n  children,\r\n  className,\r\n  index,\r\n  listLength,\r\n  animationPhase,\r\n  onFormationComplete,\r\n  stackGap = 10,\r\n  columnGap = 100,\r\n  scaleFactor = 0.1,\r\n  formationDuration = 1,\r\n  visibleItemsCount = 4,\r\n  resetSpringStiffness = 120,\r\n  resetSpringDamping = 20,\r\n}: AnimatedListItemProps & {\r\n  animationPhase: AnimationPhase;\r\n  onFormationComplete?: () => void;\r\n  formationDuration: number;\r\n  visibleItemsCount: number;\r\n  resetSpringStiffness: number;\r\n  resetSpringDamping: number;\r\n}) {\r\n  const reverseIndex = listLength - 1 - index;\r\n  const isVisible = reverseIndex < visibleItemsCount;\r\n  const lastItemOffset = (listLength - 1) * columnGap;\r\n  const isLastItem = index === listLength - 1;\r\n\r\n  const itemVariants = {\r\n    initial: {\r\n      scale: 1 + index * scaleFactor,\r\n      y: reverseIndex * stackGap,\r\n      opacity: isVisible ? 1 : 0,\r\n    },\r\n    column: {\r\n      scale: 1,\r\n      y: index * columnGap - lastItemOffset,\r\n      opacity: 1,\r\n    },\r\n  };\r\n\r\n  const target =\r\n    animationPhase === \"idle\" || animationPhase === \"resetting\"\r\n      ? \"initial\"\r\n      : \"column\";\r\n\r\n  const getTransition = () => {\r\n    if (animationPhase === \"resetting\") {\r\n      return {\r\n        type: \"spring\",\r\n        stiffness: resetSpringStiffness,\r\n        damping: resetSpringDamping,\r\n      };\r\n    } else {\r\n      return { duration: formationDuration, ease: [0.4, 0, 0.2, 1] };\r\n    }\r\n  };\r\n\r\n  const handleAnimationComplete = (definition: string) => {\r\n    if (\r\n      isLastItem &&\r\n      definition === \"column\" &&\r\n      animationPhase === \"forming_column\"\r\n    ) {\r\n      onFormationComplete?.();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      key={index}\r\n      className={cn(\"w-full flex justify-center absolute inset-x-0\", className)}\r\n      variants={itemVariants}\r\n      initial=\"initial\"\r\n      animate={target}\r\n      transition={getTransition()}\r\n      onAnimationComplete={handleAnimationComplete}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport function AnimatedList({\r\n  children,\r\n  className,\r\n  stackGap = 20,\r\n  columnGap = 85,\r\n  scaleFactor = 0.05,\r\n  scrollDownDuration = 5,\r\n  formationDuration = 1,\r\n}: AnimatedListProps) {\r\n  const initialDelayValue = 500;\r\n  const loopPauseDurationValue = 100;\r\n  const listResetSpringStiffness = 100;\r\n  const listResetSpringDamping = 25;\r\n  const itemResetSpringStiffness = 120;\r\n  const itemResetSpringDamping = 20;\r\n  const visibleItemsCountValue = 4;\r\n\r\n  const [animationPhase, setAnimationPhase] = useState<AnimationPhase>(\"idle\");\r\n  const listControls = useAnimationControls();\r\n  const childrenArray = useMemo(\r\n    () => React.Children.toArray(children),\r\n    [children]\r\n  );\r\n  const listLength = childrenArray.length;\r\n  const totalHeight = listLength * columnGap;\r\n\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timeout;\r\n    if (animationPhase === \"idle\") {\r\n      timer = setTimeout(\r\n        () => {\r\n          setAnimationPhase(\"forming_column\");\r\n        },\r\n        animationPhase === \"idle\" ? loopPauseDurationValue : initialDelayValue\r\n      );\r\n    }\r\n    return () => clearTimeout(timer);\r\n  }, [animationPhase, loopPauseDurationValue, initialDelayValue]);\r\n\r\n  const handleFormationComplete = () => {\r\n    if (animationPhase === \"forming_column\")\r\n      setAnimationPhase(\"scrolling_down\");\r\n  };\r\n  const handleScrollDownComplete = () => {\r\n    if (animationPhase === \"scrolling_down\") setAnimationPhase(\"resetting\");\r\n  };\r\n  const handleScrollUpComplete = () => {\r\n    if (animationPhase === \"resetting\") setAnimationPhase(\"idle\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (animationPhase === \"scrolling_down\") {\r\n      listControls.start({\r\n        y: totalHeight,\r\n        transition: {\r\n          duration: scrollDownDuration,\r\n          ease: [0.4, 0, 0.2, 1],\r\n        },\r\n      });\r\n    } else if (animationPhase === \"resetting\") {\r\n      listControls.start({\r\n        y: 0,\r\n        transition: {\r\n          type: \"spring\",\r\n          stiffness: listResetSpringStiffness,\r\n          damping: listResetSpringDamping,\r\n        },\r\n      });\r\n    } else {\r\n      listControls.set({ y: 0 });\r\n    }\r\n  }, [\r\n    animationPhase,\r\n    listControls,\r\n    totalHeight,\r\n    scrollDownDuration,\r\n    listResetSpringStiffness,\r\n    listResetSpringDamping,\r\n  ]);\r\n\r\n  const handleListAnimationComplete = (definition: { y?: number }) => {\r\n    if (definition.y === totalHeight && animationPhase === \"scrolling_down\") {\r\n      handleScrollDownComplete();\r\n    } else if (definition.y === 0 && animationPhase === \"resetting\") {\r\n      handleScrollUpComplete();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      className={cn(\"relative w-full h-full flex items-center\", className)}\r\n      initial={{ y: 0 }}\r\n      animate={listControls}\r\n      onAnimationComplete={handleListAnimationComplete}\r\n    >\r\n      <AnimatePresence>\r\n        {childrenArray.map((child, index) => (\r\n          <InternalAnimatedListItem\r\n            key={index}\r\n            index={index}\r\n            listLength={listLength}\r\n            animationPhase={animationPhase}\r\n            onFormationComplete={\r\n              index === listLength - 1 ? handleFormationComplete : undefined\r\n            }\r\n            stackGap={stackGap}\r\n            columnGap={columnGap}\r\n            scaleFactor={scaleFactor}\r\n            formationDuration={formationDuration}\r\n            visibleItemsCount={visibleItemsCountValue}\r\n            resetSpringStiffness={itemResetSpringStiffness}\r\n            resetSpringDamping={itemResetSpringDamping}\r\n          >\r\n            {child}\r\n          </InternalAnimatedListItem>\r\n        ))}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}