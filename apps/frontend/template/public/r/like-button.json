{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "like-button",
  "type": "registry:ui",
  "title": "Like Button",
  "description": "A dynamic button that animates on click, creating a burst of heart icons that randomly scatter before fading out.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/components/buttons/like-button.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { AnimationSequence, useAnimate } from \"framer-motion\";\r\n\r\ninterface IconProps {\r\n  className?: string;\r\n}\r\n\r\nconst Icon: React.FC<IconProps> = ({ className }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 512 512\"\r\n    className={cn(\"w-4 h-4\", className)}\r\n    fill=\"currentColor\"\r\n  >\r\n    <path d=\"M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z\" />\r\n  </svg>\r\n);\r\n\r\ninterface LikeButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  className?: string;\r\n  children?: React.ReactNode;\r\n  iconCount?: number;\r\n}\r\n\r\nexport function LikeButton({\r\n  className,\r\n  children,\r\n  iconCount = 20,\r\n  ...props\r\n}: LikeButtonProps) {\r\n  const [scope, animate] = useAnimate();\r\n  const [liked, setLiked] = useState<boolean>(false);\r\n\r\n  const randomNumber = (min: number, max: number): number =>\r\n    Math.floor(Math.random() * (max - min + 1) + min);\r\n\r\n  const handleClick = () => {\r\n    setLiked(!liked);\r\n\r\n    const icons = Array.from({ length: iconCount });\r\n    const iconsAnimation = icons.map((_, index) => [\r\n      `.icon-${index}`,\r\n      {\r\n        x: randomNumber(-100, 100),\r\n        y: randomNumber(-100, 100),\r\n        opacity: [1, 0],\r\n        scale: [randomNumber(1, 1.5), 0],\r\n      },\r\n      {\r\n        duration: 0.7,\r\n        at: \"<\",\r\n      },\r\n    ]);\r\n\r\n    const iconsReset = icons.map((_, index) => [\r\n      `.icon-${index}`,\r\n      {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      {\r\n        duration: 0.000001,\r\n      },\r\n    ]);\r\n\r\n    if (!liked) {\r\n      animate([...iconsReset, ...iconsAnimation] as AnimationSequence);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div ref={scope} className=\"relative\">\r\n      <button\r\n        onClick={handleClick}\r\n        className={cn(\r\n          \"bg-neutral-100 hover:bg-neutral-100/90 dark:bg-neutral-900 dark:hover:bg-neutral-900/90 relative h-10 px-4 py-2 inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 cursor-pointer\",\r\n          liked\r\n            ? \"dark:text-white text-black\"\r\n            : \"dark:text-white/70 text-black/70\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <Icon\r\n          className={\r\n            liked ? \"text-red-500\" : \"dark:text-neutral-800 text-neutral-200\"\r\n          }\r\n        />\r\n        {children}\r\n        <span aria-hidden className=\"absolute inset-0 pointer-events-none\">\r\n          {Array.from({ length: iconCount }).map((_, index) => (\r\n            <Icon\r\n              key={index}\r\n              className={`absolute left-1/2 top-1/2 opacity-0 text-red-500 icon-${index}`}\r\n            />\r\n          ))}\r\n        </span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}