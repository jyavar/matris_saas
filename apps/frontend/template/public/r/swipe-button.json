{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "swipe-button",
  "type": "registry:ui",
  "title": "Swipe Button",
  "description": "A sleek swipe-to-validate button with animated text, smooth transitions.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/components/buttons/swipe-button.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef, CSSProperties, useEffect } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ChevronRight, Check } from \"lucide-react\";\r\n\r\nexport interface SwipeButtonProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  onSwipeComplete?: () => void;\r\n  text?: string;\r\n  className?: string;\r\n  gap?: number;\r\n  validationDuration?: number;\r\n}\r\n\r\nexport function SwipeButton({\r\n  onSwipeComplete,\r\n  text = \"Swipe to validate\",\r\n  className,\r\n  gap = 3,\r\n  validationDuration = 2000,\r\n  ...props\r\n}: SwipeButtonProps) {\r\n  const [isSwiped, setIsSwiped] = useState(false);\r\n  const [isValidated, setIsValidated] = useState(false);\r\n  const [startX, setStartX] = useState(0);\r\n  const [currentX, setCurrentX] = useState(0);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const buttonRef = useRef<HTMLButtonElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (isValidated) {\r\n      const timer = setTimeout(() => {\r\n        setIsValidated(false);\r\n        setIsSwiped(false);\r\n        setCurrentX(0);\r\n        setIsDragging(false);\r\n      }, validationDuration);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [isValidated, validationDuration]);\r\n\r\n  const handleStart = (clientX: number) => {\r\n    if (isValidated) return;\r\n    setStartX(clientX);\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleMove = (clientX: number) => {\r\n    if (!buttonRef.current || !isDragging || isValidated) return;\r\n\r\n    const containerWidth = containerRef.current?.offsetWidth || 0;\r\n    const buttonWidth = buttonRef.current.offsetWidth;\r\n    const maxSwipe = containerWidth - buttonWidth - gap * 2;\r\n\r\n    let newX = clientX - startX;\r\n    newX = Math.max(0, Math.min(newX, maxSwipe));\r\n\r\n    setCurrentX(newX);\r\n    setIsSwiped(newX >= maxSwipe - 10);\r\n  };\r\n\r\n  const handleEnd = () => {\r\n    if (isValidated) return;\r\n\r\n    if (isSwiped) {\r\n      setIsValidated(true);\r\n      setCurrentX(0);\r\n      onSwipeComplete?.();\r\n    } else {\r\n      setCurrentX(0);\r\n      setIsSwiped(false);\r\n    }\r\n    setIsDragging(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={cn(\r\n        \"relative w-[250px] h-10 rounded-lg overflow-hidden\",\r\n        \"bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-800 shadow-sm\",\r\n        \"transition-colors duration-200\",\r\n        className\r\n      )}\r\n      onTouchStart={(e) => handleStart(e.touches[0].clientX)}\r\n      onTouchMove={(e) => handleMove(e.touches[0].clientX)}\r\n      onTouchEnd={handleEnd}\r\n      onMouseDown={(e) => handleStart(e.clientX)}\r\n      onMouseMove={(e) => handleMove(e.clientX)}\r\n      onMouseUp={handleEnd}\r\n      onMouseLeave={handleEnd}\r\n      role=\"button\"\r\n      aria-label=\"Swipe to validate\"\r\n      {...props}\r\n    >\r\n      <button\r\n        ref={buttonRef}\r\n        className={cn(\r\n          \"absolute rounded-md\",\r\n          \"bg-neutral-900 dark:bg-white text-white dark:text-neutral-900\",\r\n          \"flex items-center justify-center\",\r\n          \"cursor-grab active:cursor-grabbing\",\r\n          \"shadow-sm transition-all duration-300\",\r\n          \"hover:bg-neutral-800 dark:hover:bg-neutral-100\",\r\n          \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 dark:focus-visible:ring-neutral-600 focus-visible:ring-offset-2 dark:focus-visible:ring-offset-neutral-900\",\r\n          \"disabled:pointer-events-none\",\r\n          isValidated &&\r\n            \"w-[calc(100%-6px)] cursor-default bg-emerald-500 dark:bg-emerald-500 hover:bg-emerald-500 dark:hover:bg-emerald-500 opacity-100\"\r\n        )}\r\n        style={{\r\n          width: isValidated ? `calc(100% - ${gap * 2}px)` : \"36px\",\r\n          height: `calc(100% - ${gap * 2}px)`,\r\n          left: isValidated ? `${gap}px` : `${gap}px`,\r\n          top: `${gap}px`,\r\n          transform: isValidated ? \"none\" : `translateX(${currentX}px)`,\r\n          transition: isDragging ? \"none\" : \"all 0.3s ease\",\r\n        }}\r\n        aria-label={isValidated ? \"Validated\" : \"Swipe to validate\"}\r\n        disabled={isValidated}\r\n      >\r\n        {isValidated ? (\r\n          <Check className=\"w-4 h-4\" aria-hidden=\"true\" />\r\n        ) : (\r\n          <ChevronRight className=\"w-4 h-4\" aria-hidden=\"true\" />\r\n        )}\r\n      </button>\r\n      <div className=\"w-full h-full flex items-center justify-center\">\r\n        <span\r\n          style={{ \"--swipe-button-text-width\": \"130px\" } as CSSProperties}\r\n          className={cn(\r\n            \"mx-auto max-w-md text-neutral-600/70 dark:text-neutral-400/70 text-sm pointer-events-none\",\r\n            \"animate-swipe-button-text bg-clip-text bg-no-repeat [background-position:0_0] [background-size:var(--swipe-button-text-width)_100%] [transition:background-position_1s_cubic-bezier(.4,0,.2,1)_infinite] select-none\",\r\n            \"bg-gradient-to-r from-transparent via-black/80 via-50% to-transparent dark:via-white/80\"\r\n          )}\r\n        >\r\n          {text}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ],
  "tailwind": {
    "config": {
      "theme": {
        "extend": {
          "keyframes": {
            "swipe-button-text": {
              "0%": {
                "background-position": "0 0"
              },
              "100%": {
                "background-position": "var(--swipe-button-text-width) 0"
              }
            }
          },
          "animation": {
            "swipe-button-text": "swipe-button-text 1.5s cubic-bezier(.4,0,.2,1) infinite"
          }
        }
      }
    }
  }
}