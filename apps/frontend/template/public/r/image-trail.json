{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-trail",
  "type": "registry:ui",
  "title": "Image Trail",
  "description": "Image Trail adds a dynamic, interactive trail of images that follows the cursor, enhancing user engagement and visual appeal on your website.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "registry/components/image-trail.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { gsap, Expo, Power1, Quint } from \"gsap\";\r\n\r\ninterface ImageTrailProps {\r\n  images: string[];\r\n  imageWidth?: number;\r\n  imageHeight?: number;\r\n  threshold?: number;\r\n  duration?: number;\r\n}\r\n\r\nexport function ImageTrail({\r\n  images = [],\r\n  imageWidth = 200,\r\n  imageHeight = 200,\r\n  threshold = 50,\r\n  duration = 1.6,\r\n}: ImageTrailProps) {\r\n  const contentRef = useRef<HTMLDivElement | null>(null);\r\n  const imagesRef = useRef<HTMLImageElement[]>([]);\r\n  const mousePos = useRef({ x: 0, y: 0 });\r\n  const cacheMousePos = useRef({ x: 0, y: 0 });\r\n  const lastMousePos = useRef({ x: 0, y: 0 });\r\n  const zIndexVal = useRef(1);\r\n  const imgPosition = useRef(0);\r\n  const parentSize = useRef({ width: 0, height: 0 });\r\n\r\n  useEffect(() => {\r\n    if (contentRef.current) {\r\n      imagesRef.current = Array.from(\r\n        contentRef.current.querySelectorAll(\"img\"),\r\n      );\r\n    }\r\n\r\n    const handleMouseMove = (e: MouseEvent) => {\r\n      const rect = contentRef.current?.getBoundingClientRect();\r\n      if (rect) {\r\n        mousePos.current = {\r\n          x: e.clientX - rect.left,\r\n          y: e.clientY - rect.top,\r\n        };\r\n      }\r\n    };\r\n\r\n    calcParentSize();\r\n    if (imagesRef.current.length === 0) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove);\r\n    window.addEventListener(\"resize\", calcParentSize);\r\n\r\n    requestAnimationFrame(renderImages);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove);\r\n      window.removeEventListener(\"resize\", calcParentSize);\r\n    };\r\n  }, []);\r\n\r\n  const calcParentSize = () => {\r\n    const rect = contentRef.current?.getBoundingClientRect();\r\n    if (rect) {\r\n      parentSize.current = { width: rect.width, height: rect.height };\r\n    }\r\n  };\r\n\r\n  const lerp = (a: number, b: number, n: number) => (1 - n) * a + n * b;\r\n\r\n  const getMouseDistance = () => {\r\n    const dx = mousePos.current.x - lastMousePos.current.x;\r\n    const dy = mousePos.current.y - lastMousePos.current.y;\r\n    return Math.hypot(dx, dy);\r\n  };\r\n\r\n  const renderImages = () => {\r\n    const distance = getMouseDistance();\r\n\r\n    cacheMousePos.current.x = lerp(\r\n      cacheMousePos.current.x,\r\n      mousePos.current.x,\r\n      0.1,\r\n    );\r\n    cacheMousePos.current.y = lerp(\r\n      cacheMousePos.current.y,\r\n      mousePos.current.y,\r\n      0.1,\r\n    );\r\n\r\n    if (distance > threshold) {\r\n      showNextImage();\r\n      zIndexVal.current += 1;\r\n      imgPosition.current =\r\n        (imgPosition.current + 1) % imagesRef.current.length;\r\n      lastMousePos.current = { ...mousePos.current };\r\n    }\r\n\r\n    requestAnimationFrame(renderImages);\r\n  };\r\n\r\n  const showNextImage = () => {\r\n    const img = imagesRef.current[imgPosition.current];\r\n    if (!img) return;\r\n\r\n    const rect = img.getBoundingClientRect();\r\n    gsap.killTweensOf(img);\r\n\r\n    gsap\r\n      .timeline()\r\n      .set(img, {\r\n        startAt: { opacity: 0 },\r\n        opacity: 1,\r\n        zIndex: zIndexVal.current,\r\n        x: cacheMousePos.current.x - rect.width / 2,\r\n        y: cacheMousePos.current.y - rect.height / 2,\r\n      })\r\n      .to(img, {\r\n        duration: duration,\r\n        ease: Expo.easeOut,\r\n        x: mousePos.current.x - rect.width / 2,\r\n        y: mousePos.current.y - rect.height / 2,\r\n      })\r\n      .to(\r\n        img,\r\n        {\r\n          duration: 1,\r\n          ease: Power1.easeOut,\r\n          opacity: 0,\r\n        },\r\n        0.4,\r\n      )\r\n      .to(\r\n        img,\r\n        {\r\n          duration: 1,\r\n          ease: Quint.easeInOut,\r\n          y: `+=${parentSize.current.height + rect.height / 2}`,\r\n        },\r\n        0.4,\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={\r\n        {\r\n          \"--image-width\": `${imageWidth}px`,\r\n          \"--image-height\": `${imageHeight}px`,\r\n        } as React.CSSProperties & {\r\n          \"--image-width\": string;\r\n          \"--image-height\": string;\r\n        }\r\n      }\r\n      className=\"h-full w-full relative flex justify-center items-center isolate overflow-hidden z-0\"\r\n      ref={contentRef}\r\n    >\r\n      {images.map((url, index) => (\r\n        <img\r\n          key={index}\r\n          className=\"absolute opacity-0 will-change-transform left-0 top-0 h-[var(--image-height)] w-[var(--image-width)] object-cover pointer-events-none\"\r\n          src={url}\r\n          alt={`Image ${index + 1}`}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}