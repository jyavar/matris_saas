{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dock",
  "type": "registry:ui",
  "title": "Dock",
  "description": "An interactive icon dock that smoothly scales icons/images on hover, providing a responsive and engaging visual effect.",
  "files": [
    {
      "path": "registry/components/dock.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useRef } from \"react\";\r\n\r\ninterface DockProps {\r\n  className?: string;\r\n  children: React.ReactNode;\r\n  maxAdditionalSize?: number;\r\n  iconSize?: number;\r\n}\r\n\r\ninterface DockIconProps {\r\n  className?: string;\r\n  src?: string;\r\n  href: string;\r\n  name: string;\r\n  handleIconHover?: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n  children?: React.ReactNode;\r\n  iconSize?: number;\r\n}\r\n\r\ntype ScaleValueParams = [number, number];\r\n\r\nexport const scaleValue = function (\r\n  value: number,\r\n  from: ScaleValueParams,\r\n  to: ScaleValueParams,\r\n): number {\r\n  const scale = (to[1] - to[0]) / (from[1] - from[0]);\r\n  const capped = Math.min(from[1], Math.max(from[0], value)) - from[0];\r\n  return Math.floor(capped * scale + to[0]);\r\n};\r\n\r\nexport function DockIcon({\r\n  className,\r\n  src,\r\n  href,\r\n  name,\r\n  handleIconHover,\r\n  children,\r\n  iconSize,\r\n}: DockIconProps) {\r\n  const ref = useRef<HTMLLIElement | null>(null);\r\n\r\n  return (\r\n    <>\r\n      <style jsx>\r\n        {`\r\n          .icon:hover + .icon {\r\n            width: calc(\r\n              var(--icon-size) * 1.33 + var(--dock-offset-right, 0px)\r\n            );\r\n            height: calc(\r\n              var(--icon-size) * 1.33 + var(--dock-offset-right, 0px)\r\n            );\r\n            margin-top: calc(\r\n              var(--icon-size) * -0.33 + var(--dock-offset-right, 0) * -1\r\n            );\r\n          }\r\n\r\n          .icon:hover + .icon + .icon {\r\n            width: calc(\r\n              var(--icon-size) * 1.17 + var(--dock-offset-right, 0px)\r\n            );\r\n            height: calc(\r\n              var(--icon-size) * 1.17 + var(--dock-offset-right, 0px)\r\n            );\r\n            margin-top: calc(\r\n              var(--icon-size) * -0.17 + var(--dock-offset-right, 0) * -1\r\n            );\r\n          }\r\n\r\n          .icon:has(+ .icon:hover) {\r\n            width: calc(var(--icon-size) * 1.33 + var(--dock-offset-left, 0px));\r\n            height: calc(\r\n              var(--icon-size) * 1.33 + var(--dock-offset-left, 0px)\r\n            );\r\n            margin-top: calc(\r\n              var(--icon-size) * -0.33 + var(--dock-offset-left, 0) * -1\r\n            );\r\n          }\r\n\r\n          .icon:has(+ .icon + .icon:hover) {\r\n            width: calc(var(--icon-size) * 1.17 + var(--dock-offset-left, 0px));\r\n            height: calc(\r\n              var(--icon-size) * 1.17 + var(--dock-offset-left, 0px)\r\n            );\r\n            margin-top: calc(\r\n              var(--icon-size) * -0.17 + var(--dock-offset-left, 0) * -1\r\n            );\r\n          }\r\n        `}\r\n      </style>\r\n      <li\r\n        ref={ref}\r\n        style={\r\n          {\r\n            transition:\r\n              \"width, height, margin-top, cubic-bezier(0.25, 1, 0.5, 1) 150ms\",\r\n            \"--icon-size\": `${iconSize}px`,\r\n          } as React.CSSProperties\r\n        }\r\n        onMouseMove={handleIconHover}\r\n        className={cn(\r\n          \"icon h-[var(--icon-size)] w-[var(--icon-size)] px-[calc(var(--icon-size)*0.075)] group/li cursor-pointer hover:w-[calc(var(--icon-size)*1.5)] hover:h-[calc(var(--icon-size)*1.5)] hover:-mt-[calc(var(--icon-size)/2)] [&_img]:object-contain flex items-center justify-center\",\r\n          className,\r\n        )}\r\n      >\r\n        <a\r\n          href={href}\r\n          className=\"relative aspect-square rounded-[10px] p-1.5 w-full bg-gradient-to-t from-neutral-100 dark:from-zinc-900 to-white dark:to-zinc-800 dark:shadow-[rgba(255,_255,_255,_0.3)_0px_1px_0px_inset] shadow-[rgba(0,_0,_0,_0.05)_0px_1px_0px_inset] border border-gray-100 dark:border-zinc-900 after:inset-0 after:absolute after:shadow-md after:shadow-zinc-800/10 after:rounded-[inherit] group/a\"\r\n        >\r\n          <span className=\"text-xs absolute top-[-40px] border border-gray-100 dark:border-zinc-800 text-black dark:text-white rounded-md bg-gradient-to-t from-neutral-100 dark:from-zinc-900 to-white dark:to-zinc-800 p-1 px-2 left-1/2 -translate-x-1/2 opacity-0 transition-opacity duration-200 group-hover/li:opacity-100 whitespace-nowrap\">\r\n            {name}\r\n          </span>\r\n          {src ? (\r\n            <img\r\n              src={src}\r\n              alt={name}\r\n              className=\"rounded-[inherit] h-full w-full\"\r\n            />\r\n          ) : (\r\n            children\r\n          )}\r\n        </a>\r\n      </li>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function Dock({\r\n  className,\r\n  children,\r\n  maxAdditionalSize = 5,\r\n  iconSize = 55,\r\n}: DockProps) {\r\n  const dockRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  const handleIconHover = (e: React.MouseEvent<HTMLLIElement>) => {\r\n    if (!dockRef.current) return;\r\n    const mousePos = e.clientX;\r\n    const iconPosLeft = e.currentTarget.getBoundingClientRect().left;\r\n    const iconWidth = e.currentTarget.getBoundingClientRect().width;\r\n\r\n    const cursorDistance = (mousePos - iconPosLeft) / iconWidth;\r\n    const offsetPixels = scaleValue(\r\n      cursorDistance,\r\n      [0, 1],\r\n      [maxAdditionalSize * -1, maxAdditionalSize],\r\n    );\r\n\r\n    dockRef.current.style.setProperty(\r\n      \"--dock-offset-left\",\r\n      `${offsetPixels * -1}px`,\r\n    );\r\n\r\n    dockRef.current.style.setProperty(\r\n      \"--dock-offset-right\",\r\n      `${offsetPixels}px`,\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav ref={dockRef} role=\"navigation\" aria-label=\"Main Dock\">\r\n      <ul\r\n        className={cn(\r\n          \"flex items-center bg-gradient-to-t from-neutral-50 dark:from-zinc-950 to-white dark:to-zinc-900 border border-gray-100 dark:border-zinc-900 p-1 rounded-xl \",\r\n          className,\r\n        )}\r\n      >\r\n        {React.Children.map(children, (child) =>\r\n          React.isValidElement<DockIconProps>(child)\r\n            ? React.cloneElement(child as React.ReactElement<DockIconProps>, {\r\n                handleIconHover,\r\n                iconSize,\r\n              })\r\n            : child,\r\n        )}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}