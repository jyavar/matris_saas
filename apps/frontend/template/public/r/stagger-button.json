{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stagger-button",
  "type": "registry:ui",
  "title": "Stagger Button",
  "description": "A dynamic button that animates on hover, where each letter of the text flips in 3D with a staggered effect.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/components/buttons/stagger-button.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, ReactNode, CSSProperties } from \"react\";\r\nimport { stagger, useAnimate } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface StaggerButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  className?: string;\r\n  children: ReactNode;\r\n  duration?: number;\r\n  staggerDelay?: number;\r\n  height?: number;\r\n}\r\n\r\nexport function StaggerButton({\r\n  className,\r\n  children,\r\n  duration = 0.2,\r\n  staggerDelay = 0.05,\r\n  height = 26,\r\n  ...props\r\n}: StaggerButtonProps) {\r\n  const [scope, animate] = useAnimate();\r\n  const [isHovered, setIsHovered] = useState<boolean>(false);\r\n\r\n  const onMouseEnter = () => {\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isHovered) {\r\n      animate([\r\n        [\r\n          \".letter\",\r\n          {\r\n            rotateX: 90,\r\n          },\r\n          { duration, delay: stagger(staggerDelay) },\r\n        ],\r\n        [\r\n          \".letter::after\",\r\n          {\r\n            rotateX: 90,\r\n          },\r\n          { duration, delay: stagger(staggerDelay) },\r\n        ],\r\n      ]);\r\n    } else {\r\n      animate([\r\n        [\r\n          \".letter\",\r\n          {\r\n            rotateX: 0,\r\n          },\r\n          { duration, delay: stagger(staggerDelay) },\r\n        ],\r\n        [\r\n          \".letter::after\",\r\n          {\r\n            rotateX: -90,\r\n          },\r\n          { duration, delay: stagger(staggerDelay) },\r\n        ],\r\n      ]);\r\n    }\r\n  }, [isHovered, animate, duration, staggerDelay]);\r\n\r\n  const lettersArray = children?.toString().split(\"\") || [];\r\n\r\n  return (\r\n    <div\r\n      ref={scope}\r\n      style={\r\n        {\r\n          \"--height\": `${height}px`,\r\n          perspective: \"1000px\",\r\n        } as CSSProperties\r\n      }\r\n    >\r\n      <button\r\n        onMouseEnter={onMouseEnter}\r\n        onMouseLeave={onMouseLeave}\r\n        className={cn(\r\n          \"relative bg-neutral-100 text-black dark:bg-neutral-900 dark:text-white h-10 px-4 py-2 inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <span className=\"sr-only\">{children}</span>\r\n        <span\r\n          aria-hidden\r\n          className=\"h-[--height] overflow-hidden flex items-center justify-center relative\"\r\n        >\r\n          {lettersArray.map((letter, index) => (\r\n            <span\r\n              style={{\r\n                transformStyle: \"preserve-3d\",\r\n                transition: `transform cubic-bezier(0.3, 0.65, 0.4, 1)`,\r\n              }}\r\n              data-letter={letter}\r\n              key={`${letter}-${index}`}\r\n              className=\"letter inline-block h-[--height] leading-[--height]\"\r\n            >\r\n              <span className=\"opacity-0\">{letter === \" \" ? \"Â \" : letter}</span>\r\n            </span>\r\n          ))}\r\n          <style jsx>{`\r\n            .letter::before {\r\n              content: attr(data-letter);\r\n              position: absolute;\r\n              left: 0;\r\n              top: 0;\r\n              transform: rotateX(0deg) translateZ(calc(var(--height) / 2));\r\n            }\r\n            .letter::after {\r\n              content: attr(data-letter);\r\n              position: absolute;\r\n              left: 0;\r\n              top: 0;\r\n              transform: rotateX(-90deg) translateZ(calc(var(--height) / 2));\r\n            }\r\n          `}</style>\r\n        </span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}