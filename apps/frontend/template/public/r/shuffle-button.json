{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shuffle-button",
  "type": "registry:ui",
  "title": "Shuffle Button",
  "description": "A dynamic button that shuffles the characters of its text when hovered over, creating an engaging animation.",
  "files": [
    {
      "path": "registry/components/buttons/shuffle-button.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nfunction shuffleChar(char: string): string {\r\n  const characters = \"abcdefghijklmnopqrstuvwxyz\";\r\n  return char === \" \"\r\n    ? \" \"\r\n    : characters[Math.floor(Math.random() * characters.length)];\r\n}\r\n\r\ninterface ShuffleButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  children: string;\r\n  className?: string;\r\n  duration?: number;\r\n}\r\n\r\nexport function ShuffleButton({\r\n  children,\r\n  className,\r\n  duration = 1,\r\n  ...props\r\n}: ShuffleButtonProps) {\r\n  const [shuffledText, setShuffledText] = useState<string>(children);\r\n  const [isHovering, setIsHovering] = useState<boolean>(false);\r\n  const intervals = useRef<NodeJS.Timeout[]>([]);\r\n  const timeouts = useRef<NodeJS.Timeout[]>([]);\r\n\r\n  useEffect(() => {\r\n    const textArray = children.split(\"\");\r\n    const numberOfCharacters = textArray.filter((char) => char !== \" \").length;\r\n    const ABC = (duration * 500) / numberOfCharacters;\r\n\r\n    if (isHovering) {\r\n      textArray.forEach((char, index) => {\r\n        if (char !== \" \") {\r\n          const intervalId = setInterval(() => {\r\n            textArray[index] = shuffleChar(char);\r\n            setShuffledText(textArray.join(\"\"));\r\n          }, 25);\r\n          intervals.current.push(intervalId);\r\n\r\n          const timeoutId = setTimeout(\r\n            () => {\r\n              clearInterval(intervalId);\r\n              textArray[index] = children[index];\r\n              setShuffledText(textArray.join(\"\"));\r\n            },\r\n            ABC * (index + 1)\r\n          );\r\n          timeouts.current.push(timeoutId);\r\n        }\r\n      });\r\n    } else {\r\n      textArray.forEach((char, index) => {\r\n        if (char !== \" \") {\r\n          const intervalId = setInterval(() => {\r\n            textArray[numberOfCharacters - 1 - index] = shuffleChar(char);\r\n            setShuffledText(textArray.join(\"\"));\r\n          }, 25);\r\n          intervals.current.push(intervalId);\r\n\r\n          const timeoutId = setTimeout(\r\n            () => {\r\n              clearInterval(intervalId);\r\n              textArray[numberOfCharacters - 1 - index] =\r\n                children[numberOfCharacters - 1 - index];\r\n              setShuffledText(textArray.join(\"\"));\r\n            },\r\n            ABC * (index + 1)\r\n          );\r\n          timeouts.current.push(timeoutId);\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      intervals.current.forEach(clearInterval);\r\n      timeouts.current.forEach(clearTimeout);\r\n      intervals.current = [];\r\n      timeouts.current = [];\r\n    };\r\n  }, [isHovering, children, duration]);\r\n\r\n  return (\r\n    <button\r\n      className={cn(\r\n        \"font-mono bg-neutral-100 text-black dark:bg-neutral-900 dark:text-white h-10 px-4 py-2 inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n        className\r\n      )}\r\n      onMouseEnter={() => setIsHovering(true)}\r\n      onMouseLeave={() => setIsHovering(false)}\r\n      {...props}\r\n    >\r\n      {shuffledText}\r\n    </button>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}