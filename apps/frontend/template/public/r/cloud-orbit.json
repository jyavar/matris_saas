{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cloud-orbit",
  "type": "registry:ui",
  "title": "Cloud Orbit",
  "description": "This component creates a dynamic and interactive experience, where each icon orbits in a fluid motion. Fully customizable, it's ideal for showcasing your tech stack or the tools your product uses.",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/components/cloud-orbit.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface Image {\r\n  url: string;\r\n  name: string;\r\n}\r\n\r\ninterface CloudOrbitProps {\r\n  duration?: number;\r\n  children?: React.ReactNode;\r\n  size?: number;\r\n  className?: string;\r\n  images?: Image[];\r\n  [key: string]:\r\n    | string\r\n    | number\r\n    | boolean\r\n    | React.ReactNode\r\n    | Image[]\r\n    | undefined;\r\n}\r\n\r\nexport function CloudOrbit({\r\n  duration = 2,\r\n  children,\r\n  size = 160,\r\n  className,\r\n  images = [],\r\n  ...props\r\n}: CloudOrbitProps) {\r\n  const [currentIndex, setCurrentIndex] = React.useState(0);\r\n  const lastTimestamp = React.useRef(0);\r\n\r\n  React.useEffect(() => {\r\n    let animationFrameId: number;\r\n\r\n    const updateFrame = (timestamp: number) => {\r\n      if (lastTimestamp.current === 0) {\r\n        lastTimestamp.current = timestamp;\r\n      }\r\n\r\n      const elapsedTime = (timestamp - lastTimestamp.current) / 1000;\r\n      const currentImageIndex =\r\n        Math.floor(elapsedTime / duration) % images.length;\r\n\r\n      setCurrentIndex(currentImageIndex);\r\n\r\n      animationFrameId = requestAnimationFrame(updateFrame);\r\n    };\r\n\r\n    if (images.length > 0) {\r\n      animationFrameId = requestAnimationFrame(updateFrame);\r\n    }\r\n\r\n    return () => cancelAnimationFrame(animationFrameId);\r\n  }, [duration, images.length]);\r\n\r\n  return (\r\n    <div\r\n      style={\r\n        {\r\n          \"--size\": `${size}px`,\r\n        } as React.CSSProperties\r\n      }\r\n      className={cn(\r\n        \"relative h-full w-full select-none rounded-full flex items-center justify-center\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <AnimatePresence>\r\n        {images.length > 0 &&\r\n          images.map(\r\n            (image, index) =>\r\n              index === currentIndex && (\r\n                <motion.img\r\n                  key={image.url}\r\n                  src={image.url}\r\n                  alt={image.name}\r\n                  initial={{ opacity: 0, scale: 0.8 }}\r\n                  animate={{ opacity: 1, scale: [0.8, 1] }}\r\n                  exit={{ opacity: 0, scale: [1, 0.8] }}\r\n                  transition={{\r\n                    type: \"spring\",\r\n                    stiffness: 100,\r\n                    damping: 7,\r\n                  }}\r\n                  className={cn(\r\n                    \"absolute h-[--size] w-[--size] z-10 rounded-[inherit] bg-gradient-to-t from-neutral-100 dark:from-zinc-900 to-white dark:to-zinc-800 dark:shadow-[rgba(255,_255,_255,_0.3)_0px_1px_0px_inset] shadow-[rgba(0,_0,_0,_0.05)_0px_1px_0px_inset] border border-gray-100 dark:border-zinc-900\",\r\n                    className\r\n                  )}\r\n                />\r\n              )\r\n          )}\r\n      </AnimatePresence>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface OrbitingImageProps {\r\n  speed?: number;\r\n  radius?: number;\r\n  startAt?: number;\r\n  size?: number;\r\n  className?: string;\r\n  images?: Image[];\r\n  duration?: number;\r\n  [key: string]:\r\n    | string\r\n    | number\r\n    | boolean\r\n    | React.ReactNode\r\n    | Image[]\r\n    | undefined;\r\n}\r\n\r\nexport function OrbitingImage({\r\n  speed = 20,\r\n  radius = 100,\r\n  startAt = 0,\r\n  size = 80,\r\n  className,\r\n  images = [],\r\n  duration = 2,\r\n  ...props\r\n}: OrbitingImageProps) {\r\n  const [currentIndex, setCurrentIndex] = React.useState(0);\r\n  const lastTimestamp = React.useRef(0);\r\n\r\n  React.useEffect(() => {\r\n    let animationFrameId: number;\r\n\r\n    const updateFrame = (timestamp: number) => {\r\n      if (lastTimestamp.current === 0) {\r\n        lastTimestamp.current = timestamp;\r\n      }\r\n\r\n      const elapsedTime = (timestamp - lastTimestamp.current) / 1000;\r\n      const currentImageIndex =\r\n        Math.floor(elapsedTime / duration) % images.length;\r\n\r\n      setCurrentIndex(currentImageIndex);\r\n\r\n      animationFrameId = requestAnimationFrame(updateFrame);\r\n    };\r\n\r\n    if (images.length > 0) {\r\n      animationFrameId = requestAnimationFrame(updateFrame);\r\n    }\r\n\r\n    return () => cancelAnimationFrame(animationFrameId);\r\n  }, [duration, images.length]);\r\n\r\n  return (\r\n    <div\r\n      style={\r\n        {\r\n          \"--speed\": speed,\r\n          \"--radius\": radius,\r\n          \"--size\": `${size}px`,\r\n          animationDelay: `-${startAt * speed}s`,\r\n        } as React.CSSProperties\r\n      }\r\n      className={cn(\r\n        \"absolute flex h-[--size] w-[--size] z-[5] transform-gpu animate-cloud-orbit items-center justify-center rounded-full p-[5%]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <AnimatePresence>\r\n        {images.length > 0 &&\r\n          images.map(\r\n            (image, index) =>\r\n              index === currentIndex && (\r\n                <motion.div\r\n                  key={image.url}\r\n                  style={{\r\n                    width: `${size}px`,\r\n                    height: `${size}px`,\r\n                    position: \"absolute\",\r\n                    transformOrigin: `center ${radius}px`,\r\n                  }}\r\n                  initial={{ opacity: 0, scale: 0.8 }}\r\n                  animate={{ opacity: 1, scale: [0.8, 1] }}\r\n                  exit={{ opacity: 0, scale: [1, 0.8] }}\r\n                  transition={{\r\n                    type: \"spring\",\r\n                    stiffness: 100,\r\n                    damping: 7,\r\n                  }}\r\n                  className={cn(\r\n                    \"rounded-full bg-gradient-to-t from-neutral-100 dark:from-zinc-900 to-white dark:to-zinc-800 dark:shadow-[rgba(255,_255,_255,_0.3)_0px_1px_0px_inset] shadow-[rgba(0,_0,_0,_0.05)_0px_1px_0px_inset] border border-gray-100 dark:border-zinc-900 p-[15%]\",\r\n                    className\r\n                  )}\r\n                >\r\n                  <img\r\n                    src={image.url}\r\n                    alt={image.name}\r\n                    className=\"h-full w-full flex items-center justify-center rounded-full object-contain\"\r\n                  />\r\n                </motion.div>\r\n              )\r\n          )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ],
  "cssVars": {
    "theme": {
      "animate-cloud-orbit": "cloud-orbit calc(var(--speed) * 1s) linear infinite"
    }
  },
  "css": {
    "@keyframes cloud-orbit": {
      "0%": {
        "transform": "rotate(0deg) translateY(calc(var(--radius) * 1px)) rotate(0deg)"
      },
      "25%": {
        "transform": "rotate(90deg) translateY(calc(var(--radius) * 1px)) rotate(-90deg)"
      },
      "50%": {
        "transform": "rotate(180deg) translateY(calc(var(--radius) * 1px)) rotate(-180deg)"
      },
      "75%": {
        "transform": "rotate(270deg) translateY(calc(var(--radius) * 1px)) rotate(-270deg)"
      },
      "100%": {
        "transform": "rotate(360deg) translateY(calc(var(--radius) * 1px)) rotate(-360deg)"
      }
    }
  }
}