{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cursor-cards",
  "type": "registry:ui",
  "title": "Cursor Card",
  "description": "A card component that can showcase anything.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/components/cursor-cards.tsx",
      "content": "\"use client\";\r\n\r\nimport { motion, useMotionTemplate, useMotionValue } from \"motion/react\";\r\nimport React, { useCallback, useEffect, useRef } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface CursorCardsContainerProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  proximityRange?: number;\r\n}\r\n\r\ninterface CursorCardProps {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  illuminationRadius?: number;\r\n  illuminationColor?: string;\r\n  illuminationOpacity?: number;\r\n  primaryHue?: string;\r\n  secondaryHue?: string;\r\n  borderColor?: string;\r\n}\r\n\r\ninterface InternalCursorCardProps extends CursorCardProps {\r\n  globalMouseX?: number;\r\n  globalMouseY?: number;\r\n  isWithinRange?: boolean;\r\n}\r\n\r\nfunction useMousePosition(proximityRange: number) {\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n  const [mouseState, setMouseState] = React.useState({\r\n    mousePositionX: 0,\r\n    mousePositionY: 0,\r\n    isWithinRange: false,\r\n  });\r\n\r\n  const handlePointerMovement = useCallback(\r\n    (event: PointerEvent) => {\r\n      if (!wrapperRef.current) return;\r\n\r\n      const bounds = wrapperRef.current.getBoundingClientRect();\r\n      const { clientX, clientY } = event;\r\n\r\n      const isInProximity =\r\n        clientX >= bounds.left - proximityRange &&\r\n        clientX <= bounds.right + proximityRange &&\r\n        clientY >= bounds.top - proximityRange &&\r\n        clientY <= bounds.bottom + proximityRange;\r\n\r\n      setMouseState({\r\n        mousePositionX: clientX,\r\n        mousePositionY: clientY,\r\n        isWithinRange: isInProximity,\r\n      });\r\n    },\r\n    [proximityRange]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"pointermove\", handlePointerMovement);\r\n    return () =>\r\n      document.removeEventListener(\"pointermove\", handlePointerMovement);\r\n  }, [handlePointerMovement]);\r\n\r\n  return { wrapperRef, mouseState };\r\n}\r\n\r\nfunction useCardActivation(\r\n  elementRef: React.RefObject<HTMLDivElement | null>,\r\n  globalMouseX: number,\r\n  globalMouseY: number,\r\n  isWithinRange: boolean,\r\n  illuminationRadius: number\r\n) {\r\n  const localMouseX = useMotionValue(-illuminationRadius);\r\n  const localMouseY = useMotionValue(-illuminationRadius);\r\n  const [isCardActive, setIsCardActive] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!elementRef.current || !isWithinRange) {\r\n      setIsCardActive(false);\r\n      localMouseX.set(-illuminationRadius);\r\n      localMouseY.set(-illuminationRadius);\r\n      return;\r\n    }\r\n\r\n    const rect = elementRef.current.getBoundingClientRect();\r\n    const extendedProximity = 100;\r\n\r\n    const isNearCard =\r\n      globalMouseX >= rect.left - extendedProximity &&\r\n      globalMouseX <= rect.right + extendedProximity &&\r\n      globalMouseY >= rect.top - extendedProximity &&\r\n      globalMouseY <= rect.bottom + extendedProximity;\r\n\r\n    setIsCardActive(isNearCard);\r\n\r\n    if (isNearCard) {\r\n      localMouseX.set(globalMouseX - rect.left);\r\n      localMouseY.set(globalMouseY - rect.top);\r\n    } else {\r\n      localMouseX.set(-illuminationRadius);\r\n      localMouseY.set(-illuminationRadius);\r\n    }\r\n  }, [\r\n    globalMouseX,\r\n    globalMouseY,\r\n    isWithinRange,\r\n    illuminationRadius,\r\n    localMouseX,\r\n    localMouseY,\r\n  ]);\r\n\r\n  return { localMouseX, localMouseY, isCardActive };\r\n}\r\n\r\nexport function CursorCardsContainer({\r\n  children,\r\n  className,\r\n  proximityRange = 400,\r\n}: CursorCardsContainerProps) {\r\n  const { wrapperRef, mouseState } = useMousePosition(proximityRange);\r\n\r\n  const enhancedChildren = React.Children.map(children, (child) => {\r\n    if (React.isValidElement(child) && child.type === CursorCard) {\r\n      return React.cloneElement(\r\n        child as React.ReactElement<InternalCursorCardProps>,\r\n        {\r\n          globalMouseX: mouseState.mousePositionX,\r\n          globalMouseY: mouseState.mousePositionY,\r\n          isWithinRange: mouseState.isWithinRange,\r\n        }\r\n      );\r\n    }\r\n    return child;\r\n  });\r\n\r\n  return (\r\n    <div ref={wrapperRef} className={cn(\"relative\", className)}>\r\n      {enhancedChildren}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function CursorCard({\r\n  children,\r\n  className,\r\n  illuminationRadius = 200,\r\n  illuminationColor = \"#FFFFFF10\",\r\n  illuminationOpacity = 0.8,\r\n  primaryHue = \"#EC4899\",\r\n  secondaryHue = \"#6D77D5\",\r\n  borderColor = \"#E5E5E5\",\r\n  globalMouseX = 0,\r\n  globalMouseY = 0,\r\n  isWithinRange = false,\r\n}: InternalCursorCardProps) {\r\n  const elementRef = useRef<HTMLDivElement>(null);\r\n  const { localMouseX, localMouseY, isCardActive } = useCardActivation(\r\n    elementRef,\r\n    globalMouseX,\r\n    globalMouseY,\r\n    isWithinRange,\r\n    illuminationRadius\r\n  );\r\n\r\n  const gradientBackground = useMotionTemplate`\r\n    radial-gradient(${illuminationRadius}px circle at ${localMouseX}px ${localMouseY}px,\r\n    ${primaryHue}, \r\n    ${secondaryHue},\r\n    ${borderColor} 100%\r\n    )\r\n  `;\r\n\r\n  const illuminationBackground = useMotionTemplate`\r\n    radial-gradient(${illuminationRadius}px circle at ${localMouseX}px ${localMouseY}px, \r\n    ${illuminationColor}, transparent 100%)\r\n  `;\r\n\r\n  return (\r\n    <div\r\n      ref={elementRef}\r\n      className={cn(\"group relative rounded-[inherit]\", className)}\r\n    >\r\n      <motion.div\r\n        className=\"pointer-events-none absolute inset-0 rounded-[inherit]\"\r\n        style={{ background: gradientBackground }}\r\n      />\r\n      <div className=\"absolute inset-px rounded-[inherit] bg-white dark:bg-black\" />\r\n      <motion.div\r\n        className={cn(\r\n          \"pointer-events-none absolute inset-px rounded-[inherit] opacity-0 transition-opacity duration-300\",\r\n          isCardActive && \"opacity-100\"\r\n        )}\r\n        style={{\r\n          background: illuminationBackground,\r\n          opacity: isCardActive ? illuminationOpacity : 0,\r\n        }}\r\n      />\r\n      <div className=\"relative\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}