#!/usr/bin/env tsx

/**
 * üõ°Ô∏è PACK DE DEFENSA PREVENTIVA STRATO‚Ñ¢ - SISTEMA DE RECORDATORIOS AUTOM√ÅTICOS
 * 
 * Este script se ejecuta autom√°ticamente al iniciar cada sesi√≥n de desarrollo
 * para recordar y garantizar la aplicaci√≥n del PACK DE DEFENSA PREVENTIVA STRATO‚Ñ¢.
 * 
 * @strato-module: DEFENSE
 * @strato-file: defense-reminder.ts
 * @strato-version: 1.0.0
 * @strato-traceability: true
 * @strato-tests: defense-reminder.test.ts
 * @strato-routes: N/A
 * @strato-controller: N/A
 */

import { existsSync, readFileSync, writeFileSync } from 'fs'
import { join } from 'path'
import { execSync } from 'child_process'

class DefenseReminder {
  private readonly rootDir = process.cwd()
  private readonly reminderFile = join(this.rootDir, '.defense-reminder')
  private readonly lastRunFile = join(this.rootDir, '.defense-last-run')

  constructor() {
    this.showBanner()
  }

  /**
   * Mostrar banner del PACK DE DEFENSA PREVENTIVA STRATO‚Ñ¢
   */
  private showBanner(): void {
    console.log(`
üõ°Ô∏è PACK DE DEFENSA PREVENTIVA STRATO‚Ñ¢ - RECORDATORIO AUTOM√ÅTICO
================================================================

üéØ OBJETIVO: GARANTIZAR CALIDAD, TRAZABILIDAD Y ROBUSTEZ
üìã ESTADO: ACTIVO Y MONITOREANDO

üìä M√âTRICAS OBLIGATORIAS:
   ‚úÖ Cobertura de tests: ‚â• 90%
   ‚úÖ Performance de tests: < 5s por test
   ‚úÖ Trazabilidad: 100% archivos con headers
   ‚úÖ Orphan files: 0 archivos hu√©rfanos
   ‚úÖ False positives: 0 tests falsos positivos
   ‚úÖ Dead code: 0 archivos muertos
   ‚úÖ Fragile imports: 0 imports fr√°giles

üö® CHECKLIST OBLIGATORIO POR COMMIT:
   1. üîç Validaci√≥n de c√≥digo (lint + types)
   2. üß™ Tests obligatorios
   3. üß≠ Validaci√≥n de trazabilidad
   4. üìÅ Detecci√≥n de archivos hu√©rfanos
   5. üìÑ Validaci√≥n de headers
   6. ‚ö° Performance de tests
   7. üéØ Detecci√≥n de falsos positivos

ü§ñ COMANDOS DISPONIBLES:
   pnpm validate:full          # Validaci√≥n completa
   pnpm test:performance       # Medir performance
   pnpm detect:orphan:files    # Detectar archivos hu√©rfanos
   pnpm validate:traceability  # Validar trazabilidad
   pnpm dashboard:status       # Estado del sistema

üìö DOCUMENTACI√ìN: PACK_DEFENSA_PREVENTIVA_STRATO.md

================================================================
`)
  }

  /**
   * Verificar si es la primera vez que se ejecuta
   */
  private isFirstRun(): boolean {
    return !existsSync(this.lastRunFile)
  }

  /**
   * Verificar si han pasado m√°s de 24 horas desde la √∫ltima ejecuci√≥n
   */
  private shouldShowReminder(): boolean {
    if (!existsSync(this.lastRunFile)) {
      return true
    }

    try {
      const lastRun = readFileSync(this.lastRunFile, 'utf8')
      const lastRunTime = new Date(lastRun).getTime()
      const now = new Date().getTime()
      const hoursDiff = (now - lastRunTime) / (1000 * 60 * 60)
      
      return hoursDiff >= 24
    } catch {
      return true
    }
  }

  /**
   * Mostrar recordatorio de implementaci√≥n
   */
  private showImplementationReminder(): void {
    console.log(`
üöÄ IMPLEMENTACI√ìN DEL PACK DE DEFENSA PREVENTIVA STRATO‚Ñ¢
========================================================

Para implementar autom√°ticamente todas las validaciones:

   pnpm tsx scripts/defense-pack-implementation.ts

Esto configurar√°:
   ‚úÖ Pre-commit hooks autom√°ticos
   ‚úÖ Templates de test
   ‚úÖ Generaci√≥n de headers
   ‚úÖ Sistema de factories
   ‚úÖ Scripts de package.json

¬øQuieres implementar ahora? (y/n)
`)
  }

  /**
   * Mostrar recordatorio de validaci√≥n
   */
  private showValidationReminder(): void {
    console.log(`
üìã RECORDATORIO DE VALIDACI√ìN
=============================

Antes de hacer commit, ejecuta:

   pnpm validate:full

Esto validar√°:
   ‚úÖ Linting y type checking
   ‚úÖ Tests obligatorios
   ‚úÖ Trazabilidad
   ‚úÖ Archivos hu√©rfanos
   ‚úÖ Headers
   ‚úÖ Performance
   ‚úÖ Falsos positivos

¬øQuieres ejecutar validaci√≥n ahora? (y/n)
`)
  }

  /**
   * Mostrar estado actual del sistema
   */
  private showSystemStatus(): void {
    console.log(`
üìä ESTADO ACTUAL DEL SISTEMA
============================

Verificando m√©tricas...

`)
    
    // Verificar cobertura de tests
    try {
      const coverageOutput = execSync('pnpm test --coverage', { stdio: 'pipe' }).toString()
      
      if (coverageOutput.includes('All files')) {
        console.log('‚úÖ Cobertura de tests: Verificada')
      } else {
        console.log('‚ö†Ô∏è Cobertura de tests: Requiere verificaci√≥n')
      }
    } catch {
      console.log('‚ùå Cobertura de tests: Error al verificar')
    }

    // Verificar archivos hu√©rfanos
    try {
      const modulesPath = join(this.rootDir, 'modules.json')
      if (existsSync(modulesPath)) {
        const modules = JSON.parse(readFileSync(modulesPath, 'utf8'))
        let totalFiles = 0
        let filesWithHeaders = 0
        
        for (const [, moduleData] of Object.entries(modules)) {
          const moduleFiles = (moduleData as { files?: string[] }).files || []
          totalFiles += moduleFiles.length
          
          for (const file of moduleFiles) {
            const filePath = join(this.rootDir, file)
            if (existsSync(filePath)) {
              const content = readFileSync(filePath, 'utf8')
              if (content.includes('@strato-module:')) {
                filesWithHeaders++
              }
            }
          }
        }
        
        console.log(`‚úÖ Archivos con headers: ${filesWithHeaders}/${totalFiles}`)
        console.log(`‚úÖ M√≥dulos registrados: ${Object.keys(modules).length}`)
      } else {
        console.log('‚ùå modules.json no encontrado')
      }
    } catch {
      console.log('‚ùå Error verificando trazabilidad')
    }

    console.log(`
üìà PR√ìXIMOS PASOS RECOMENDADOS:
   1. Ejecutar pnpm validate:full
   2. Revisar m√©tricas de performance
   3. Verificar cobertura de tests
   4. Validar trazabilidad completa

`)
  }

  /**
   * Actualizar timestamp de √∫ltima ejecuci√≥n
   */
  private updateLastRun(): void {
    writeFileSync(this.lastRunFile, new Date().toISOString())
  }

  /**
   * Ejecutar recordatorio
   */
  public async run(): Promise<void> {
    try {
      // Mostrar banner siempre
      this.showBanner()
      
      // Si es la primera vez, mostrar implementaci√≥n
      if (this.isFirstRun()) {
        this.showImplementationReminder()
        this.updateLastRun()
        return
      }
      
      // Si han pasado m√°s de 24 horas, mostrar recordatorio
      if (this.shouldShowReminder()) {
        this.showValidationReminder()
        this.updateLastRun()
        return
      }
      
      // Mostrar estado del sistema
      this.showSystemStatus()
      this.updateLastRun()
      
    } catch {
      console.error('‚ùå Error en el sistema de recordatorios')
    }
  }
}

// Ejecutar recordatorio si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  const reminder = new DefenseReminder()
  reminder.run()
}

export default DefenseReminder 